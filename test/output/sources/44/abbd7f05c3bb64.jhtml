{"name":"typesizes.h","path":"/usr/include/x86_64-linux-gnu/bits/typesizes.h","root":"../06/416cc91f3e3d90.html","project":"test","tag":"output","parents":[{"name":"usr","href":"../60/7abc7e1c17ae25.html"},{"name":"include","href":"../19/901c5d9478e5ce.html"},{"name":"x86_64-linux-gnu","href":"../f0/212845f8a256c3.html"},{"name":"bits","href":"../23/32e20e89ff3dae.html"}]}
---
<span class='comment'>/* bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.
   Copyright (C) 2012-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   &lt;http://www.gnu.org/licenses/&gt;.  */</span>

<span class='directive'>#ifndef _BITS_TYPES_H</span><span class='preprocessor-if muted'>
<span class='directive'># error "Never include &lt;bits/typesizes.h&gt; directly; use &lt;sys/types.h&gt; instead."</span></span>
<span class='directive'>#endif</span>

<span class='directive'>#ifndef	_BITS_TYPESIZES_H</span>
<span class='directive'>#define	_BITS_TYPESIZES_H	1</span>

<span class='comment'>/* See &lt;bits/types.h&gt; for the meaning of these macros.  This file exists so
   that &lt;bits/types.h&gt; need not vary across different GNU platforms.  */</span>

<span class='comment'>/* X32 kernel interface is 64-bit.  */</span>
<span class='directive'>#if defined __x86_64__ &amp;&amp; defined __ILP32__</span><span class='preprocessor-if muted'>
<span class='directive'># define __SYSCALL_SLONG_TYPE	__SQUAD_TYPE</span>
<span class='directive'># define __SYSCALL_ULONG_TYPE	__UQUAD_TYPE</span></span>
<span class='directive'>#else</span>
<span class='directive'># define __SYSCALL_SLONG_TYPE	__SLONGWORD_TYPE</span>
<span class='directive'># define __SYSCALL_ULONG_TYPE	__ULONGWORD_TYPE</span>
<span class='directive'>#endif</span>

<span class='directive'>#define __DEV_T_TYPE		__UQUAD_TYPE</span>
<span class='directive'>#define __UID_T_TYPE		__U32_TYPE</span>
<span class='directive'>#define __GID_T_TYPE		__U32_TYPE</span>
<span class='directive'>#define __INO_T_TYPE		__SYSCALL_ULONG_TYPE</span>
<span class='directive'>#define __INO64_T_TYPE		__UQUAD_TYPE</span>
<span class='directive'>#define __MODE_T_TYPE		__U32_TYPE</span>
<span class='directive'>#ifdef __x86_64__</span>
<span class='directive'># define __NLINK_T_TYPE		__SYSCALL_ULONG_TYPE</span>
<span class='directive'># define __FSWORD_T_TYPE	__SYSCALL_SLONG_TYPE</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __NLINK_T_TYPE		__UWORD_TYPE</span>
<span class='directive'># define __FSWORD_T_TYPE	__SWORD_TYPE</span></span>
<span class='directive'>#endif</span>
<span class='directive'>#define __OFF_T_TYPE		__SYSCALL_SLONG_TYPE</span>
<span class='directive'>#define __OFF64_T_TYPE		__SQUAD_TYPE</span>
<span class='directive'>#define __PID_T_TYPE		__S32_TYPE</span>
<span class='directive'>#define __RLIM_T_TYPE		__SYSCALL_ULONG_TYPE</span>
<span class='directive'>#define __RLIM64_T_TYPE		__UQUAD_TYPE</span>
<span class='directive'>#define __BLKCNT_T_TYPE		__SYSCALL_SLONG_TYPE</span>
<span class='directive'>#define __BLKCNT64_T_TYPE	__SQUAD_TYPE</span>
<span class='directive'>#define __FSBLKCNT_T_TYPE	__SYSCALL_ULONG_TYPE</span>
<span class='directive'>#define __FSBLKCNT64_T_TYPE	__UQUAD_TYPE</span>
<span class='directive'>#define __FSFILCNT_T_TYPE	__SYSCALL_ULONG_TYPE</span>
<span class='directive'>#define __FSFILCNT64_T_TYPE	__UQUAD_TYPE</span>
<span class='directive'>#define __ID_T_TYPE		__U32_TYPE</span>
<span class='directive'>#define __CLOCK_T_TYPE		__SYSCALL_SLONG_TYPE</span>
<span class='directive'>#define __TIME_T_TYPE		__SYSCALL_SLONG_TYPE</span>
<span class='directive'>#define __USECONDS_T_TYPE	__U32_TYPE</span>
<span class='directive'>#define __SUSECONDS_T_TYPE	__SYSCALL_SLONG_TYPE</span>
<span class='directive'>#define __DADDR_T_TYPE		__S32_TYPE</span>
<span class='directive'>#define __KEY_T_TYPE		__S32_TYPE</span>
<span class='directive'>#define __CLOCKID_T_TYPE	__S32_TYPE</span>
<span class='directive'>#define __TIMER_T_TYPE		void *</span>
<span class='directive'>#define __BLKSIZE_T_TYPE	__SYSCALL_SLONG_TYPE</span>
<span class='directive'>#define __FSID_T_TYPE		struct { int __val[2]; }</span>
<span class='directive'>#define __SSIZE_T_TYPE		__SWORD_TYPE</span>
<span class='directive'>#define __CPU_MASK_TYPE 	__SYSCALL_ULONG_TYPE</span>

<span class='directive'>#ifdef __x86_64__</span>
<span class='comment'>/* Tell the libc code that off_t and off64_t are actually the same type
   for all ABI purposes, even if possibly expressed as different base types
   for C type-checking purposes.  */</span>
<span class='directive'># define __OFF_T_MATCHES_OFF64_T	1</span>

<span class='comment'>/* Same for ino_t and ino64_t.  */</span>
<span class='directive'># define __INO_T_MATCHES_INO64_T	1</span>

<span class='comment'>/* And for __rlim_t and __rlim64_t.  */</span>
<span class='directive'># define __RLIM_T_MATCHES_RLIM64_T	1</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __RLIM_T_MATCHES_RLIM64_T	0</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* Number of descriptors that can fit in an `fd_set'.  */</span>
<span class='directive'>#define __FD_SETSIZE		1024</span>


<span class='directive'>#endif /* bits/typesizes.h */</span>