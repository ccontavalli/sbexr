{"name":"test-multiple-file-1.cc","path":"test-multiple-file-1.cc","root":"../be/e2916b98dcf1fc.html","project":"test","tag":"output","parents":[]}
---
<span class='directive'>#include <a class='include' href='../e5/66fd4ef5cee94a.html'>"test-multiple-file-1.h"</a></span>

<span class='comment'>// #include &lt;list&gt;</span>
<span class='directive'>#include <a class='include' href='../6f/078dbcc264af74.html'>&lt;stdio.h&gt;</a></span>
<span class='directive'>#include <a class='include' href='../bc/764de7984141e0.html'>"include-all.h"</a></span>

<span class='def def-Namespace' id='000070010000b001'><span class='keyword namespace'>namespace</span> test {
<span class='def def-CXXRecord' id='000080010000a001'><span class='keyword struct'>struct</span> Point {
  <span class='def def-Field' id='0000900300009012'><span class='def def-Field' id='000090030000900b'><span class='keyword int'>int</span> x = <span class='numeric'>0</span></span>, y = <span class='numeric'>0</span></span>;
}</span>;
}</span>

<span class='def def-Function' id='0000d00100011001'><span class='keyword void'>void</span> TestFunction() {
  <a class='variable-uses' href='../bc/764de7984141e0.html#0002200100024001'>MACRO</a>(<span class='numeric'>10</span>);
  <a class='variable-uses' href='../6f/078dbcc264af74.html#0014c0010014c038'>MACROP</a>(<span class='string'>"TEST TEST"</span>);
  <a class='variable-uses' href='../6f/078dbcc264af74.html#0014c0010014c038'>printf</a>(<span class='string'>"Test Function: %d\n"</span>, <a class='variable-uses' href='../e5/66fd4ef5cee94a.html#000220010002200c'>global_counter</a>);
}</span>

<span class='directive'># define POINT volatile test::Point</span>
<span class='def def-Typedef' id='0001400100014010'><span class='keyword typedef'>typedef</span> POINT* punt</span>;

<span class='def def-UsingDirective' id='0001600100016011'><span class='keyword using'>using</span> <span class='keyword namespace'>namespace</span> test</span>;


<span class='def def-Function' id='000190010002d001'><span class='keyword void'>void</span> TestMore(<span class='def def-ParmVar' id='0001900f00019015'><a class='declaration-uses' href='../e5/66fd4ef5cee94a.html#0002000100020007'>Test*</a> test</span>) {
  <span class='def def-Var' id='0001a0030001a011'><span class='def def-Var' id='0001a0030001a00d'><span class='def def-Var' id='0001a0030001a009'><a class='declaration-uses' href='../cf/341b97b05a5692.html#000080010000a001'>Point</a> ab</span>, ac</span>, ad</span>;
  <span class='def def-Var' id='0001b0030001b01b'><span class='def def-Var' id='0001b0030001b016'><span class='def def-Var' id='0001b0030001b011'><span class='def def-Var' id='0001b0030001b00d'><span class='def def-Var' id='0001b0030001b009'><a class='declaration-uses' href='../cf/341b97b05a5692.html#000080010000a001'>Point</a> p0</span>, p1</span>, p2</span>, *p3</span>, *p4</span>;
  <span class='def def-Var' id='0001c0030001c027'><span class='keyword static'>static</span> <a class='declaration-uses' href='../cf/341b97b05a5692.html#000080010000a001'>POINT <span class='keyword __attribute__'>__attribute__</span>((used))*</a> fuffa</span>;
  <span class='def def-Var' id='0001d0030001d027'><span class='keyword static'>static</span> <span class='keyword __attribute__'>__attribute__</span>((used)) <a class='declaration-uses' href='../cf/341b97b05a5692.html#000080010000a001'>POINT*</a> fuffa2</span>;

  <span class='comment'>// POINT* foffa</span>
  <span class='comment'>// volatile Point* foffa</span>
  <span class='def def-Var' id='0002100300021008'><a class='declaration-uses' href='../cf/341b97b05a5692.html#000080010000a001'>punt</a> foffa</span>;
  <span class='comment'>// POINT** foffa</span>
  <span class='comment'>// volatile Point** foffa</span>
  <span class='def def-Var' id='0002400300024009'><a class='declaration-uses' href='../cf/341b97b05a5692.html#000080010000a001'>punt*</a> foffa2</span>;

  <span class='comment'>// std::list&lt;bool&gt;* plist2, *plist3;</span>
  <span class='def def-Var' id='000270030002700f'><a class='declaration-uses' href='../cf/341b97b05a5692.html#000080010000a001'>test::Point</a> test3</span>;

  <a class='variable-uses' href='../bc/764de7984141e0.html#0002200100024001'>MACRO</a>(<span class='numeric'>20</span>);
  <a class='variable-uses' href='../6f/078dbcc264af74.html#0014c0010014c038'>MACROP</a>(<span class='string'>"TOST TOST"</span>);
  <a class='variable-uses' href='../6f/078dbcc264af74.html#0014c0010014c038'>printf</a>(<span class='string'>"Test pointer %p\n"</span>, (<span class='keyword void'>void</span>*)<a class='variable-uses' href='../cf/341b97b05a5692.html#0001900f00019015'>test</a>);
  <a class='variable-uses' href='../6f/078dbcc264af74.html#0014c0010014c038'>printf</a>(<span class='string'>"Test point %d %d %d\n"</span>, <a class='variable-uses' href='../cf/341b97b05a5692.html#0001b0030001b009'>p0</a>.<a class='expression-uses' href='../cf/341b97b05a5692.html#000090030000900b'>x</a>, <a class='variable-uses' href='../cf/341b97b05a5692.html#0001b0030001b00d'>p1</a>.<a class='expression-uses' href='../cf/341b97b05a5692.html#000090030000900b'>x</a>, <a class='variable-uses' href='../cf/341b97b05a5692.html#0001b0030001b011'>p2</a>.<a class='expression-uses' href='../cf/341b97b05a5692.html#000090030000900b'>x</a>);
}</span>