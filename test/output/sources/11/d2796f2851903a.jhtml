{"name":"cdefs.h","path":"/usr/include/x86_64-linux-gnu/sys/cdefs.h","root":"../06/416cc91f3e3d90.html","project":"test","tag":"output","parents":[{"name":"usr","href":"../60/7abc7e1c17ae25.html"},{"name":"include","href":"../19/901c5d9478e5ce.html"},{"name":"x86_64-linux-gnu","href":"../f0/212845f8a256c3.html"},{"name":"sys","href":"../97/537cbc7aefc4ad.html"}]}
---
<span class='comment'>/* Copyright (C) 1992-2018 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   &lt;http://www.gnu.org/licenses/&gt;.  */</span>

<span class='directive'>#ifndef	_SYS_CDEFS_H</span>
<span class='directive'>#define	_SYS_CDEFS_H	1</span>

<span class='comment'>/* We are almost always included from features.h. */</span>
<span class='directive'>#ifndef _FEATURES_H</span><span class='preprocessor-if muted'>
<span class='directive'># include &lt;features.h&gt;</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* The GNU libc does not support any K&amp;R compilers or the traditional mode
   of ISO C compilers anymore.  Check for some of the combinations not
   anymore supported.  */</span>
<span class='directive'>#if defined __GNUC__ &amp;&amp; !defined __STDC__</span><span class='preprocessor-if muted'>
<span class='directive'># error "You need a ISO C conforming compiler to use the glibc headers"</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* Some user header file might have defined this before.  */</span>
<span class='directive'>#undef	__P</span>
<span class='directive'>#undef	__PMT</span>

<span class='directive'>#ifdef __GNUC__</span>

<span class='comment'>/* All functions, except those with callbacks or those that
   synchronize memory, are leaf functions.  */</span>
<span class='directive'># if __GNUC_PREREQ (4, 6) &amp;&amp; !defined _LIBC</span><span class='preprocessor-if muted'>
<span class='directive'>#  define __LEAF , __leaf__</span>
<span class='directive'>#  define __LEAF_ATTR __attribute__ ((__leaf__))</span></span>
<span class='directive'># else</span>
<span class='directive'>#  define __LEAF</span>
<span class='directive'>#  define __LEAF_ATTR</span>
<span class='directive'># endif</span>

<span class='comment'>/* GCC can always grok prototypes.  For C++ programs we add throw()
   to help it optimize the function calls.  But this works only with
   gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
   as non-throwing using a function attribute since programs can use
   the -fexceptions options for C code as well.  */</span>
<span class='directive'># if !defined __cplusplus &amp;&amp; __GNUC_PREREQ (3, 3)</span><span class='preprocessor-if muted'>
<span class='directive'>#  define __THROW	__attribute__ ((__nothrow__ __LEAF))</span>
<span class='directive'>#  define __THROWNL	__attribute__ ((__nothrow__))</span>
<span class='directive'>#  define __NTH(fct)	__attribute__ ((__nothrow__ __LEAF)) fct</span>
<span class='directive'>#  define __NTHNL(fct)  __attribute__ ((__nothrow__)) fct</span></span>
<span class='directive'># else</span>
<span class='directive'>#  if defined __cplusplus &amp;&amp; __GNUC_PREREQ (2,8)</span>
<span class='directive'>#   define __THROW	throw ()</span>
<span class='directive'>#   define __THROWNL	throw ()</span>
<span class='directive'>#   define __NTH(fct)	__LEAF_ATTR fct throw ()</span>
<span class='directive'>#   define __NTHNL(fct) fct throw ()</span>
<span class='directive'>#  else</span><span class='preprocessor-if muted'>
<span class='directive'>#   define __THROW</span>
<span class='directive'>#   define __THROWNL</span>
<span class='directive'>#   define __NTH(fct)	fct</span>
<span class='directive'>#   define __NTHNL(fct) fct</span></span>
<span class='directive'>#  endif</span>
<span class='directive'># endif</span>

<span class='directive'>#else	/* Not GCC.  */</span><span class='preprocessor-if muted'>

<span class='directive'># if (defined __cplusplus						\
      || (defined __STDC_VERSION__ &amp;&amp; __STDC_VERSION__ &gt;= 199901L))</span>
<span class='directive'>#  define __inline	inline</span>
<span class='directive'># else</span>
<span class='directive'>#  define __inline		/* No inline functions.  */</span>
<span class='directive'># endif</span>

<span class='directive'># define __THROW</span>
<span class='directive'># define __THROWNL</span>
<span class='directive'># define __NTH(fct)	fct</span>
</span>
<span class='directive'>#endif	/* GCC.  */</span>

<span class='comment'>/* Compilers that are not clang may object to
       #if defined __clang__ &amp;&amp; __has_extension(...)
   even though they do not need to evaluate the right-hand side of the &amp;&amp;.  */</span>
<span class='directive'>#if defined __clang__ &amp;&amp; defined __has_extension</span>
<span class='directive'># define __glibc_clang_has_extension(ext) __has_extension (ext)</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __glibc_clang_has_extension(ext) 0</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* These two macros are not used in glibc anymore.  They are kept here
   only because some other projects expect the macros to be defined.  */</span>
<span class='directive'>#define __P(args)	args</span>
<span class='directive'>#define __PMT(args)	args</span>

<span class='comment'>/* For these things, GCC behaves the ANSI way normally,
   and the non-ANSI way under -traditional.  */</span>

<span class='directive'>#define __CONCAT(x,y)	x ## y</span>
<span class='directive'>#define __STRING(x)	#x</span>

<span class='comment'>/* This is not a typedef so `const __ptr_t' does the right thing.  */</span>
<span class='directive'>#define __ptr_t void *</span>


<span class='comment'>/* C++ needs to know that types and declarations are C, not C++.  */</span>
<span class='directive'>#ifdef	__cplusplus</span>
<span class='directive'># define __BEGIN_DECLS	extern "C" {</span>
<span class='directive'># define __END_DECLS	}</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __BEGIN_DECLS</span>
<span class='directive'># define __END_DECLS</span></span>
<span class='directive'>#endif</span>


<span class='comment'>/* Fortify support.  */</span>
<span class='directive'>#define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL &gt; 1)</span>
<span class='directive'>#define __bos0(ptr) __builtin_object_size (ptr, 0)</span>

<span class='directive'>#if __GNUC_PREREQ (4,3)</span><span class='preprocessor-if muted'>
<span class='directive'># define __warndecl(name, msg) \
  extern void name (void) __attribute__((__warning__ (msg)))</span>
<span class='directive'># define __warnattr(msg) __attribute__((__warning__ (msg)))</span>
<span class='directive'># define __errordecl(name, msg) \
  extern void name (void) __attribute__((__error__ (msg)))</span></span>
<span class='directive'>#else</span>
<span class='directive'># define __warndecl(name, msg) extern void name (void)</span>
<span class='directive'># define __warnattr(msg)</span>
<span class='directive'># define __errordecl(name, msg) extern void name (void)</span>
<span class='directive'>#endif</span>

<span class='comment'>/* Support for flexible arrays.
   Headers that should use flexible arrays only if they're "real"
   (e.g. only if they won't affect sizeof()) should test
   #if __glibc_c99_flexarr_available.  */</span>
<span class='directive'>#if defined __STDC_VERSION__ &amp;&amp; __STDC_VERSION__ &gt;= 199901L</span><span class='preprocessor-if muted'>
<span class='directive'># define __flexarr	[]</span>
<span class='directive'># define __glibc_c99_flexarr_available 1</span></span>
<span class='directive'>#elif __GNUC_PREREQ (2,97)</span>
<span class='comment'>/* GCC 2.97 supports C99 flexible array members as an extension,
   even when in C89 mode or compiling C++ (any version).  */</span>
<span class='directive'># define __flexarr	[]</span>
<span class='directive'># define __glibc_c99_flexarr_available 1</span>
<span class='directive'>#elif defined __GNUC__</span>
<span class='comment'>/* Pre-2.97 GCC did not support C99 flexible arrays but did have
   an equivalent extension with slightly different notation.  */</span>
<span class='directive'># define __flexarr	[0]</span>
<span class='directive'># define __glibc_c99_flexarr_available 1</span>
<span class='directive'>#else</span>
<span class='comment'>/* Some other non-C99 compiler.  Approximate with [1].  */</span>
<span class='directive'># define __flexarr	[1]</span>
<span class='directive'># define __glibc_c99_flexarr_available 0</span>
<span class='directive'>#endif</span>


<span class='comment'>/* __asm__ ("xyz") is used throughout the headers to rename functions
   at the assembly language level.  This is wrapped by the __REDIRECT
   macro, in order to support compilers that can do this some other
   way.  When compilers don't support asm-names at all, we have to do
   preprocessor tricks instead (which don't have exactly the right
   semantics, but it's the best we can do).

   Example:
   int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */</span>

<span class='directive'>#if defined __GNUC__ &amp;&amp; __GNUC__ &gt;= 2</span>

<span class='directive'># define __REDIRECT(name, proto, alias) name proto __asm__ (__ASMNAME (#alias))</span>
<span class='directive'># ifdef __cplusplus</span>
<span class='directive'>#  define __REDIRECT_NTH(name, proto, alias) \
     name proto __THROW __asm__ (__ASMNAME (#alias))</span>
<span class='directive'>#  define __REDIRECT_NTHNL(name, proto, alias) \
     name proto __THROWNL __asm__ (__ASMNAME (#alias))</span>
<span class='directive'># else</span><span class='preprocessor-if muted'>
<span class='directive'>#  define __REDIRECT_NTH(name, proto, alias) \
     name proto __asm__ (__ASMNAME (#alias)) __THROW</span>
<span class='directive'>#  define __REDIRECT_NTHNL(name, proto, alias) \
     name proto __asm__ (__ASMNAME (#alias)) __THROWNL</span></span>
<span class='directive'># endif</span>
<span class='directive'># define __ASMNAME(cname)  __ASMNAME2 (__USER_LABEL_PREFIX__, cname)</span>
<span class='directive'># define __ASMNAME2(prefix, cname) __STRING (prefix) cname</span>

<span class='comment'>/*
#elif __SOME_OTHER_COMPILER__

# define __REDIRECT(name, proto, alias) name proto; \
	_Pragma("let " #name " = " #alias)
*/</span>
<span class='directive'>#endif</span>

<span class='comment'>/* GCC has various useful declarations that can be made with the
   `__attribute__' syntax.  All of the ways we use this do fine if
   they are omitted for compilers that don't understand it. */</span>
<span class='directive'>#if !defined __GNUC__ || __GNUC__ &lt; 2</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute__(xyz)	/* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* At some point during the gcc 2.96 development the `malloc' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */</span>
<span class='directive'>#if __GNUC_PREREQ (2,96)</span>
<span class='directive'># define __attribute_malloc__ __attribute__ ((__malloc__))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_malloc__ /* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* Tell the compiler which arguments to an allocation function
   indicate the size of the allocation.  */</span>
<span class='directive'>#if __GNUC_PREREQ (4, 3)</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_alloc_size__(params) \
  __attribute__ ((__alloc_size__ params))</span></span>
<span class='directive'>#else</span>
<span class='directive'># define __attribute_alloc_size__(params) /* Ignore.  */</span>
<span class='directive'>#endif</span>

<span class='comment'>/* At some point during the gcc 2.96 development the `pure' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */</span>
<span class='directive'>#if __GNUC_PREREQ (2,96)</span>
<span class='directive'># define __attribute_pure__ __attribute__ ((__pure__))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_pure__ /* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* This declaration tells the compiler that the value is constant.  */</span>
<span class='directive'>#if __GNUC_PREREQ (2,5)</span>
<span class='directive'># define __attribute_const__ __attribute__ ((__const__))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_const__ /* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* At some point during the gcc 3.1 development the `used' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */</span>
<span class='directive'>#if __GNUC_PREREQ (3,1)</span>
<span class='directive'># define __attribute_used__ __attribute__ ((__used__))</span>
<span class='directive'># define __attribute_noinline__ __attribute__ ((__noinline__))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_used__ __attribute__ ((__unused__))</span>
<span class='directive'># define __attribute_noinline__ /* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* Since version 3.2, gcc allows marking deprecated functions.  */</span>
<span class='directive'>#if __GNUC_PREREQ (3,2)</span>
<span class='directive'># define __attribute_deprecated__ __attribute__ ((__deprecated__))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_deprecated__ /* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* Since version 4.5, gcc also allows one to specify the message printed
   when a deprecated function is used.  clang claims to be gcc 4.2, but
   may also support this feature.  */</span>
<span class='directive'>#if __GNUC_PREREQ (4,5) || \
    __glibc_clang_has_extension (__attribute_deprecated_with_message__)</span>
<span class='directive'># define __attribute_deprecated_msg__(msg) \
	 __attribute__ ((__deprecated__ (msg)))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_deprecated_msg__(msg) __attribute_deprecated__</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* At some point during the gcc 2.8 development the `format_arg' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.
   If several `format_arg' attributes are given for the same function, in
   gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   all designated arguments are considered.  */</span>
<span class='directive'>#if __GNUC_PREREQ (2,8)</span>
<span class='directive'># define __attribute_format_arg__(x) __attribute__ ((__format_arg__ (x)))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_format_arg__(x) /* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* At some point during the gcc 2.97 development the `strfmon' format
   attribute for functions was introduced.  We don't want to use it
   unconditionally (although this would be possible) since it
   generates warnings.  */</span>
<span class='directive'>#if __GNUC_PREREQ (2,97)</span>
<span class='directive'># define __attribute_format_strfmon__(a,b) \
  __attribute__ ((__format__ (__strfmon__, a, b)))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_format_strfmon__(a,b) /* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* The nonull function attribute allows to mark pointer parameters which
   must not be NULL.  */</span>
<span class='directive'>#if __GNUC_PREREQ (3,3)</span>
<span class='directive'># define __nonnull(params) __attribute__ ((__nonnull__ params))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __nonnull(params)</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* If fortification mode, we warn about unused results of certain
   function calls which can lead to problems.  */</span>
<span class='directive'>#if __GNUC_PREREQ (3,4)</span>
<span class='directive'># define __attribute_warn_unused_result__ \
   __attribute__ ((__warn_unused_result__))</span>
<span class='directive'># if __USE_FORTIFY_LEVEL &gt; 0</span><span class='preprocessor-if muted'>
<span class='directive'>#  define __wur __attribute_warn_unused_result__</span></span>
<span class='directive'># endif</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_warn_unused_result__ /* empty */</span></span>
<span class='directive'>#endif</span>
<span class='directive'>#ifndef __wur</span>
<span class='directive'># define __wur /* Ignore */</span>
<span class='directive'>#endif</span>

<span class='comment'>/* Forces a function to be always inlined.  */</span>
<span class='directive'>#if __GNUC_PREREQ (3,2)</span>
<span class='comment'>/* The Linux kernel defines __always_inline in stddef.h (283d7573), and
   it conflicts with this definition.  Therefore undefine it first to
   allow either header to be included first.  */</span>
<span class='directive'># undef __always_inline</span>
<span class='directive'># define __always_inline __inline __attribute__ ((__always_inline__))</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># undef __always_inline</span>
<span class='directive'># define __always_inline __inline</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* Associate error messages with the source location of the call site rather
   than with the source location inside the function.  */</span>
<span class='directive'>#if __GNUC_PREREQ (4,3)</span><span class='preprocessor-if muted'>
<span class='directive'># define __attribute_artificial__ __attribute__ ((__artificial__))</span></span>
<span class='directive'>#else</span>
<span class='directive'># define __attribute_artificial__ /* Ignore */</span>
<span class='directive'>#endif</span>

<span class='comment'>/* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   inline semantics, unless -fgnu89-inline is used.  Using __GNUC_STDC_INLINE__
   or __GNUC_GNU_INLINE is not a good enough check for gcc because gcc versions
   older than 4.3 may define these macros and still not guarantee GNU inlining
   semantics.

   clang++ identifies itself as gcc-4.2, but has support for GNU inlining
   semantics, that can be checked fot by using the __GNUC_STDC_INLINE_ and
   __GNUC_GNU_INLINE__ macro definitions.  */</span>
<span class='directive'>#if (!defined __cplusplus || __GNUC_PREREQ (4,3) \
     || (defined __clang__ &amp;&amp; (defined __GNUC_STDC_INLINE__ \
			       || defined __GNUC_GNU_INLINE__)))</span>
<span class='directive'># if defined __GNUC_STDC_INLINE__ || defined __cplusplus</span>
<span class='directive'>#  define __extern_inline extern __inline __attribute__ ((__gnu_inline__))</span>
<span class='directive'>#  define __extern_always_inline \
  extern __always_inline __attribute__ ((__gnu_inline__))</span>
<span class='directive'># else</span><span class='preprocessor-if muted'>
<span class='directive'>#  define __extern_inline extern __inline</span>
<span class='directive'>#  define __extern_always_inline extern __always_inline</span></span>
<span class='directive'># endif</span>
<span class='directive'>#endif</span>

<span class='directive'>#ifdef __extern_always_inline</span>
<span class='directive'># define __fortify_function __extern_always_inline __attribute_artificial__</span>
<span class='directive'>#endif</span>

<span class='comment'>/* GCC 4.3 and above allow passing all anonymous arguments of an
   __extern_always_inline function to some other vararg function.  */</span>
<span class='directive'>#if __GNUC_PREREQ (4,3)</span><span class='preprocessor-if muted'>
<span class='directive'># define __va_arg_pack() __builtin_va_arg_pack ()</span>
<span class='directive'># define __va_arg_pack_len() __builtin_va_arg_pack_len ()</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* It is possible to compile containing GCC extensions even if GCC is
   run in pedantic mode if the uses are carefully marked using the
   `__extension__' keyword.  But this is not generally available before
   version 2.8.  */</span>
<span class='directive'>#if !__GNUC_PREREQ (2,8)</span><span class='preprocessor-if muted'>
<span class='directive'># define __extension__		/* Ignore */</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* __restrict is known in EGCS 1.2 and above. */</span>
<span class='directive'>#if !__GNUC_PREREQ (2,92)</span><span class='preprocessor-if muted'>
<span class='directive'># if defined __STDC_VERSION__ &amp;&amp; __STDC_VERSION__ &gt;= 199901L</span>
<span class='directive'>#  define __restrict	restrict</span>
<span class='directive'># else</span>
<span class='directive'>#  define __restrict	/* Ignore */</span>
<span class='directive'># endif</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
     array_name[restrict]
   GCC 3.1 supports this.  */</span>
<span class='directive'>#if __GNUC_PREREQ (3,1) &amp;&amp; !defined __GNUG__</span><span class='preprocessor-if muted'>
<span class='directive'># define __restrict_arr	__restrict</span></span>
<span class='directive'>#else</span>
<span class='directive'># ifdef __GNUC__</span>
<span class='directive'>#  define __restrict_arr	/* Not supported in old GCC.  */</span>
<span class='directive'># else</span><span class='preprocessor-if muted'>
<span class='directive'>#  if defined __STDC_VERSION__ &amp;&amp; __STDC_VERSION__ &gt;= 199901L</span>
<span class='directive'>#   define __restrict_arr	restrict</span>
<span class='directive'>#  else</span>
<span class='comment'>/* Some other non-C99 compiler.  */</span>
<span class='directive'>#   define __restrict_arr	/* Not supported.  */</span>
<span class='directive'>#  endif</span></span>
<span class='directive'># endif</span>
<span class='directive'>#endif</span>

<span class='directive'>#if __GNUC__ &gt;= 3</span>
<span class='directive'># define __glibc_unlikely(cond)	__builtin_expect ((cond), 0)</span>
<span class='directive'># define __glibc_likely(cond)	__builtin_expect ((cond), 1)</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __glibc_unlikely(cond)	(cond)</span>
<span class='directive'># define __glibc_likely(cond)	(cond)</span></span>
<span class='directive'>#endif</span>

<span class='directive'>#ifdef __has_attribute</span>
<span class='directive'># define __glibc_has_attribute(attr)	__has_attribute (attr)</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __glibc_has_attribute(attr)	0</span></span>
<span class='directive'>#endif</span>

<span class='directive'>#if (!defined _Noreturn \
     &amp;&amp; (defined __STDC_VERSION__ ? __STDC_VERSION__ : 0) &lt; 201112 \
     &amp;&amp;  !__GNUC_PREREQ (4,7))</span>
<span class='directive'># if __GNUC_PREREQ (2,8)</span>
<span class='directive'>#  define _Noreturn __attribute__ ((__noreturn__))</span>
<span class='directive'># else</span><span class='preprocessor-if muted'>
<span class='directive'>#  define _Noreturn</span></span>
<span class='directive'># endif</span>
<span class='directive'>#endif</span>

<span class='directive'>#if __GNUC_PREREQ (8, 0)</span><span class='preprocessor-if muted'>
<span class='comment'>/* Describes a char array whose address can safely be passed as the first
   argument to strncpy and strncat, as the char array is not necessarily
   a NUL-terminated string.  */</span>
<span class='directive'># define __attribute_nonstring__ __attribute__ ((__nonstring__))</span></span>
<span class='directive'>#else</span>
<span class='directive'># define __attribute_nonstring__</span>
<span class='directive'>#endif</span>

<span class='directive'>#if (!defined _Static_assert &amp;&amp; !defined __cplusplus \
     &amp;&amp; (defined __STDC_VERSION__ ? __STDC_VERSION__ : 0) &lt; 201112 \
     &amp;&amp; (!__GNUC_PREREQ (4, 6) || defined __STRICT_ANSI__))</span><span class='preprocessor-if muted'>
<span class='directive'># define _Static_assert(expr, diagnostic) \
    extern int (*__Static_assert_function (void)) \
      [!!sizeof (struct { int __error_if_negative: (expr) ? 2 : -1; })]</span></span>
<span class='directive'>#endif</span>

<span class='directive'>#include <a class='include' href='../fd/cacc45a9906e85.html'>&lt;bits/wordsize.h&gt;</a></span>
<span class='directive'>#include <a class='include' href='../2b/f7ba919473f734.html'>&lt;bits/long-double.h&gt;</a></span>

<span class='directive'>#if defined __LONG_DOUBLE_MATH_OPTIONAL &amp;&amp; defined __NO_LONG_DOUBLE_MATH</span><span class='preprocessor-if muted'>
<span class='directive'># define __LDBL_COMPAT 1</span>
<span class='directive'># ifdef __REDIRECT</span>
<span class='directive'>#  define __LDBL_REDIR1(name, proto, alias) __REDIRECT (name, proto, alias)</span>
<span class='directive'>#  define __LDBL_REDIR(name, proto) \
  __LDBL_REDIR1 (name, proto, __nldbl_##name)</span>
<span class='directive'>#  define __LDBL_REDIR1_NTH(name, proto, alias) __REDIRECT_NTH (name, proto, alias)</span>
<span class='directive'>#  define __LDBL_REDIR_NTH(name, proto) \
  __LDBL_REDIR1_NTH (name, proto, __nldbl_##name)</span>
<span class='directive'>#  define __LDBL_REDIR1_DECL(name, alias) \
  extern __typeof (name) name __asm (__ASMNAME (#alias));</span>
<span class='directive'>#  define __LDBL_REDIR_DECL(name) \
  extern __typeof (name) name __asm (__ASMNAME ("__nldbl_" #name));</span>
<span class='directive'>#  define __REDIRECT_LDBL(name, proto, alias) \
  __LDBL_REDIR1 (name, proto, __nldbl_##alias)</span>
<span class='directive'>#  define __REDIRECT_NTH_LDBL(name, proto, alias) \
  __LDBL_REDIR1_NTH (name, proto, __nldbl_##alias)</span>
<span class='directive'># endif</span></span>
<span class='directive'>#endif</span>
<span class='directive'>#if !defined __LDBL_COMPAT || !defined __REDIRECT</span>
<span class='directive'># define __LDBL_REDIR1(name, proto, alias) name proto</span>
<span class='directive'># define __LDBL_REDIR(name, proto) name proto</span>
<span class='directive'># define __LDBL_REDIR1_NTH(name, proto, alias) name proto __THROW</span>
<span class='directive'># define __LDBL_REDIR_NTH(name, proto) name proto __THROW</span>
<span class='directive'># define __LDBL_REDIR_DECL(name)</span>
<span class='directive'># ifdef __REDIRECT</span>
<span class='directive'>#  define __REDIRECT_LDBL(name, proto, alias) __REDIRECT (name, proto, alias)</span>
<span class='directive'>#  define __REDIRECT_NTH_LDBL(name, proto, alias) \
  __REDIRECT_NTH (name, proto, alias)</span>
<span class='directive'># endif</span>
<span class='directive'>#endif</span>

<span class='comment'>/* __glibc_macro_warning (MESSAGE) issues warning MESSAGE.  This is
   intended for use in preprocessor macros.

   Note: MESSAGE must be a _single_ string; concatenation of string
   literals is not supported.  */</span>
<span class='directive'>#if __GNUC_PREREQ (4,8) || __glibc_clang_prereq (3,5)</span>
<span class='directive'># define __glibc_macro_warning1(message) _Pragma (#message)</span>
<span class='directive'># define __glibc_macro_warning(message) \
  __glibc_macro_warning1 (GCC warning message)</span>
<span class='directive'>#else</span><span class='preprocessor-if muted'>
<span class='directive'># define __glibc_macro_warning(msg)</span></span>
<span class='directive'>#endif</span>

<span class='comment'>/* Generic selection (ISO C11) is a C-only feature, available in GCC
   since version 4.9.  Previous versions do not provide generic
   selection, even though they might set __STDC_VERSION__ to 201112L,
   when in -std=c11 mode.  Thus, we must check for !defined __GNUC__
   when testing __STDC_VERSION__ for generic selection support.
   On the other hand, Clang also defines __GNUC__, so a clang-specific
   check is required to enable the use of generic selection.  */</span>
<span class='directive'>#if !defined __cplusplus \
    &amp;&amp; (__GNUC_PREREQ (4, 9) \
	|| __glibc_clang_has_extension (c_generic_selections) \
	|| (!defined __GNUC__ &amp;&amp; defined __STDC_VERSION__ \
	    &amp;&amp; __STDC_VERSION__ &gt;= 201112L))</span><span class='preprocessor-if muted'>
<span class='directive'># define __HAVE_GENERIC_SELECTION 1</span></span>
<span class='directive'>#else</span>
<span class='directive'># define __HAVE_GENERIC_SELECTION 0</span>
<span class='directive'>#endif</span>

<span class='directive'>#endif	 /* sys/cdefs.h */</span>