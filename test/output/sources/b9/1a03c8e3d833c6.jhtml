{"name":"test-clang.html","path":"test-clang.html","root":"../be/e2916b98dcf1fc.html","project":"test","tag":"output","parents":[]}
---
&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;test.c&lt;/title&gt;
&lt;style type="text/css"&gt;
 body { color:#000000; background-color:#ffffff }
 body { font-family:Helvetica, sans-serif; font-size:10pt }
 h1 { font-size:14pt }
 .code { border-collapse:collapse; width:100%; }
 .code { font-family: "Monospace", monospace; font-size:10pt }
 .code { line-height: 1.2em }
 .comment { color: green; font-style: oblique }
 .keyword { color: blue }
 .string_literal { color: red }
 .directive { color: darkmagenta }
 .expansion { display: none; }
 .macro:hover .expansion { display: block; border: 2px solid #FF0000; padding: 2px; background-color:#FFF0F0; font-weight: normal;   -webkit-border-radius:5px;  -webkit-box-shadow:1px 1px 7px #000; position: absolute; top: -1em; left:10em; z-index: 1 } 
 .macro { color: darkmagenta; background-color:LemonChiffon; position: relative }
 .num { width:2.5em; padding-right:2ex; background-color:#eeeeee }
 .num { text-align:right; font-size:8pt }
 .num { color:#444444 }
 .line { padding-left: 1ex; border-left: 3px solid #ccc }
 .line { white-space: pre }
 .msg { -webkit-box-shadow:1px 1px 7px #000 }
 .msg { -webkit-border-radius:5px }
 .msg { font-family:Helvetica, sans-serif; font-size:8pt }
 .msg { float:left }
 .msg { padding:0.25em 1ex 0.25em 1ex }
 .msg { margin-top:10px; margin-bottom:10px }
 .msg { font-weight:bold }
 .msg { max-width:60em; word-wrap: break-word; white-space: pre-wrap }
 .msgT { padding:0x; spacing:0x }
 .msgEvent { background-color:#fff8b4; color:#000000 }
 .msgControl { background-color:#bbbbbb; color:#000000 }
 .mrange { background-color:#dfddf3 }
 .mrange { border-bottom:1px solid #6F9DBE }
 .PathIndex { font-weight: bold; padding:0px 5px; margin-right:5px; }
 .PathIndex { -webkit-border-radius:8px }
 .PathIndexEvent { background-color:#bfba87 }
 .PathIndexControl { background-color:#8c8c8c }
 .PathNav a { text-decoration:none; font-size: larger }
 .CodeInsertionHint { font-weight: bold; background-color: #10dd10 }
 .CodeRemovalHint { background-color:#de1010 }
 .CodeRemovalHint { border-bottom:1px solid #6F9DBE }
 table.simpletable {
   padding: 5px;
   font-size:12pt;
   margin:20px;
   border-collapse: collapse; border-spacing: 0px;
 }
 td.rowname {
   text-align:right; font-weight:bold; color:#444444;
   padding-right:2ex; }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;&lt;table class="code"&gt;
&lt;tr&gt;&lt;td class="num" id="LN1"&gt;1&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN2"&gt;2&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN3"&gt;3&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;# define &lt;span class='macro'&gt;TEST(foo)&lt;span class='expansion'&gt;if (foo) { printf("foo"); }&lt;/span&gt;&lt;/span&gt; if (foo) { printf("foo"); }&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN4"&gt;4&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN5"&gt;5&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;int&lt;/span&gt; test() {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN6"&gt;6&lt;/td&gt;&lt;td class="line"&gt;  printf(&lt;span class='string_literal'&gt;"this is a test"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN7"&gt;7&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN8"&gt;8&lt;/td&gt;&lt;td class="line"&gt;  {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN9"&gt;9&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;int&lt;/span&gt; a = 9;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN10"&gt;10&lt;/td&gt;&lt;td class="line"&gt;    printf(&lt;span class='string_literal'&gt;"this is another test: %d"&lt;/span&gt;, a);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN11"&gt;11&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN12"&gt;12&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN13"&gt;13&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN14"&gt;14&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;return&lt;/span&gt; 3;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN15"&gt;15&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN16"&gt;16&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN17"&gt;17&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// This is a pre-existing comment.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN18"&gt;18&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;int&lt;/span&gt; main(&lt;span class='keyword'&gt;void&lt;/span&gt;) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN19"&gt;19&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;int&lt;/span&gt; value = 12;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN20"&gt;20&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;if&lt;/span&gt; (1) { value = test();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN21"&gt;21&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;if&lt;/span&gt; (value &amp;gt; 5) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN22"&gt;22&lt;/td&gt;&lt;td class="line"&gt;      printf(&lt;span class='string_literal'&gt;"this is a second test"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN23"&gt;23&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN24"&gt;24&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN25"&gt;25&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='macro'&gt;TEST(value)&lt;span class='expansion'&gt;if (value) { printf("foo"); }&lt;/span&gt;&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN26"&gt;26&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;return&lt;/span&gt; 0;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN27"&gt;27&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;
