{"name":"test2-clang.htm","path":"test2-clang.htm","root":"../be/e2916b98dcf1fc.html","project":"test","tag":"output","parents":[]}
---
&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;rewriter.cc&lt;/title&gt;
&lt;style type="text/css"&gt;
 body { color:#000000; background-color:#ffffff }
 body { font-family:Helvetica, sans-serif; font-size:10pt }
 h1 { font-size:14pt }
 .code { border-collapse:collapse; width:100%; }
 .code { font-family: "Monospace", monospace; font-size:10pt }
 .code { line-height: 1.2em }
 .comment { color: green; font-style: oblique }
 .keyword { color: blue }
 .string_literal { color: red }
 .directive { color: darkmagenta }
 .expansion { display: none; }
 .macro:hover .expansion { display: block; border: 2px solid #FF0000; padding: 2px; background-color:#FFF0F0; font-weight: normal;   -webkit-border-radius:5px;  -webkit-box-shadow:1px 1px 7px #000; position: absolute; top: -1em; left:10em; z-index: 1 } 
 .macro { color: darkmagenta; background-color:LemonChiffon; position: relative }
 .num { width:2.5em; padding-right:2ex; background-color:#eeeeee }
 .num { text-align:right; font-size:8pt }
 .num { color:#444444 }
 .line { padding-left: 1ex; border-left: 3px solid #ccc }
 .line { white-space: pre }
 .msg { -webkit-box-shadow:1px 1px 7px #000 }
 .msg { -webkit-border-radius:5px }
 .msg { font-family:Helvetica, sans-serif; font-size:8pt }
 .msg { float:left }
 .msg { padding:0.25em 1ex 0.25em 1ex }
 .msg { margin-top:10px; margin-bottom:10px }
 .msg { font-weight:bold }
 .msg { max-width:60em; word-wrap: break-word; white-space: pre-wrap }
 .msgT { padding:0x; spacing:0x }
 .msgEvent { background-color:#fff8b4; color:#000000 }
 .msgControl { background-color:#bbbbbb; color:#000000 }
 .mrange { background-color:#dfddf3 }
 .mrange { border-bottom:1px solid #6F9DBE }
 .PathIndex { font-weight: bold; padding:0px 5px; margin-right:5px; }
 .PathIndex { -webkit-border-radius:8px }
 .PathIndexEvent { background-color:#bfba87 }
 .PathIndexControl { background-color:#8c8c8c }
 .PathNav a { text-decoration:none; font-size: larger }
 .CodeInsertionHint { font-weight: bold; background-color: #10dd10 }
 .CodeRemovalHint { background-color:#de1010 }
 .CodeRemovalHint { border-bottom:1px solid #6F9DBE }
 table.simpletable {
   padding: 5px;
   font-size:12pt;
   margin:20px;
   border-collapse: collapse; border-spacing: 0px;
 }
 td.rowname {
   text-align:right; font-weight:bold; color:#444444;
   padding-right:2ex; }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;&lt;table class="code"&gt;
&lt;tr&gt;&lt;td class="num" id="LN1"&gt;1&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// Copyright (c) 2013 Carlo Contavalli (ccontavalli@gmail.com).&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN2"&gt;2&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// All rights reserved.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN3"&gt;3&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN4"&gt;4&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// Redistribution and use in source and binary forms, with or without&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN5"&gt;5&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// modification, are permitted provided that the following conditions are met:&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN6"&gt;6&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN7"&gt;7&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//    1. Redistributions of source code must retain the above copyright notice,&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN8"&gt;8&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//    this list of conditions and the following disclaimer.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN9"&gt;9&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN10"&gt;10&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//    2. Redistributions in binary form must reproduce the above copyright&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN11"&gt;11&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//    notice, this list of conditions and the following disclaimer in the&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN12"&gt;12&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//    documentation and/or other materials provided with the distribution.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN13"&gt;13&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN14"&gt;14&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// THIS SOFTWARE IS PROVIDED BY Carlo Contavalli ''AS IS'' AND ANY EXPRESS OR&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN15"&gt;15&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN16"&gt;16&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN17"&gt;17&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// EVENT SHALL Carlo Contavalli OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN18"&gt;18&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN19"&gt;19&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN20"&gt;20&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN21"&gt;21&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN22"&gt;22&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN23"&gt;23&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN24"&gt;24&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN25"&gt;25&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// The views and conclusions contained in the software and documentation are&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN26"&gt;26&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// those of the authors and should not be interpreted as representing official&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN27"&gt;27&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// policies, either expressed or implied, of Carlo Contavalli.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN28"&gt;28&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN29"&gt;29&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//------------------------------------------------------------------------------&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN30"&gt;30&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// Clang rewriter sample. Demonstrates:&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN31"&gt;31&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN32"&gt;32&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// * How to use RecursiveASTVisitor to find interesting AST nodes.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN33"&gt;33&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// * How to use the Rewriter API to rewrite the source code.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN34"&gt;34&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN35"&gt;35&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// Eli Bendersky (eliben@gmail.com)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN36"&gt;36&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// This code is in the public domain&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN37"&gt;37&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//------------------------------------------------------------------------------&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN38"&gt;38&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN39"&gt;39&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN40"&gt;40&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN41"&gt;41&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN42"&gt;42&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN43"&gt;43&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;iomanip&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN44"&gt;44&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN45"&gt;45&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN46"&gt;46&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN47"&gt;47&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN48"&gt;48&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN49"&gt;49&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN50"&gt;50&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN51"&gt;51&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/AST/ASTConsumer.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN52"&gt;52&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/AST/RecursiveASTVisitor.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN53"&gt;53&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/AST/ASTContext.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN54"&gt;54&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Basic/Diagnostic.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN55"&gt;55&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Basic/FileManager.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN56"&gt;56&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Basic/SourceManager.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN57"&gt;57&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Basic/TargetOptions.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN58"&gt;58&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Basic/TargetInfo.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN59"&gt;59&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Frontend/CompilerInstance.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN60"&gt;60&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Lex/Preprocessor.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN61"&gt;61&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Parse/ParseAST.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN62"&gt;62&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Rewrite/Core/Rewriter.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN63"&gt;63&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Rewrite/Core/HTMLRewrite.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN64"&gt;64&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "clang/Rewrite/Frontend/Rewriters.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN65"&gt;65&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "llvm/Support/Host.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN66"&gt;66&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#include "llvm/Support/raw_ostream.h"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN67"&gt;67&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN68"&gt;68&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// ./clang/lib/Frontend/Rewrite/HTMLPrint.cpp&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN69"&gt;69&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// CommentVisitor&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN70"&gt;70&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN71"&gt;71&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// Scoping:&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN72"&gt;72&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//   - variable names: links are scoped. Clicking on hte name brings to the definition within the scope.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN73"&gt;73&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//   - function names: static in .cc are per file, non static are global.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN74"&gt;74&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//   - class definitions: in .cc file, they are per file?&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN75"&gt;75&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN76"&gt;76&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// Two parts of the problem:&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN77"&gt;77&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// - identifying position of objects, linking to objects.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN78"&gt;78&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN79"&gt;79&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;using&lt;/span&gt; &lt;span class='keyword'&gt;namespace&lt;/span&gt; clang;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN80"&gt;80&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN81"&gt;81&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;class&lt;/span&gt; Id {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN82"&gt;82&lt;/td&gt;&lt;td class="line"&gt; &lt;span class='keyword'&gt;public&lt;/span&gt;:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN83"&gt;83&lt;/td&gt;&lt;td class="line"&gt;  Id(std::string start) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN84"&gt;84&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;if&lt;/span&gt; (!start.empty()) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN85"&gt;85&lt;/td&gt;&lt;td class="line"&gt;      base_ = start;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN86"&gt;86&lt;/td&gt;&lt;td class="line"&gt;      base_.append(&lt;span class='string_literal'&gt;"-"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN87"&gt;87&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN88"&gt;88&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN89"&gt;89&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN90"&gt;90&lt;/td&gt;&lt;td class="line"&gt;  std::string Get() {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN91"&gt;91&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; base_ + std::to_string(id_++);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN92"&gt;92&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN93"&gt;93&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN94"&gt;94&lt;/td&gt;&lt;td class="line"&gt; &lt;span class='keyword'&gt;private&lt;/span&gt;:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN95"&gt;95&lt;/td&gt;&lt;td class="line"&gt;  std::string base_ = &lt;span class='string_literal'&gt;""&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN96"&gt;96&lt;/td&gt;&lt;td class="line"&gt;  uint64_t id_ = 0;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN97"&gt;97&lt;/td&gt;&lt;td class="line"&gt;};&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN98"&gt;98&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN99"&gt;99&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// By implementing RecursiveASTVisitor, we can specify which AST nodes&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN100"&gt;100&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// we're interested in by overriding relevant methods.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN101"&gt;101&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;class&lt;/span&gt; MyASTVisitor : &lt;span class='keyword'&gt;public&lt;/span&gt; RecursiveASTVisitor&amp;lt;MyASTVisitor&amp;gt; {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN102"&gt;102&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;public&lt;/span&gt;:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN103"&gt;103&lt;/td&gt;&lt;td class="line"&gt;  MyASTVisitor(Rewriter &amp;amp;rewriter, SourceManager&amp;amp; source_manager) : rewriter_(rewriter), source_manager_(source_manager) {}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN104"&gt;104&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN105"&gt;105&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;bool&lt;/span&gt; TraverseStmt(Stmt *s) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN106"&gt;106&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;static&lt;/span&gt; &lt;span class='keyword'&gt;int&lt;/span&gt; depth = 0;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN107"&gt;107&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;if&lt;/span&gt; (s &amp;amp;&amp;amp; isa&amp;lt;CompoundStmt&amp;gt;(s)) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN108"&gt;108&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;auto&lt;/span&gt; *statement = cast&amp;lt;CompoundStmt&amp;gt;(s);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN109"&gt;109&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN110"&gt;110&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Find location with start of column.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN111"&gt;111&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;auto&lt;/span&gt; start = statement-&amp;gt;getLocStart();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN112"&gt;112&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;if&lt;/span&gt; (!start.isMacroID()) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN113"&gt;113&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='keyword'&gt;auto&lt;/span&gt; fid = source_manager_.getMainFileID();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN114"&gt;114&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='keyword'&gt;auto&lt;/span&gt; line = source_manager_.getExpansionLineNumber(start);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN115"&gt;115&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='keyword'&gt;auto&lt;/span&gt; cache = source_manager_.getSLocEntry(fid).getFile().getContentCache();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN116"&gt;116&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='keyword'&gt;auto&lt;/span&gt; offset = cache-&amp;gt;SourceLineCache[line - 1];&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN117"&gt;117&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN118"&gt;118&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='keyword'&gt;auto&lt;/span&gt;&amp;amp; buffer = rewriter_.getEditBuffer(fid);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN119"&gt;119&lt;/td&gt;&lt;td class="line"&gt;        std::string div = &lt;span class='string_literal'&gt;"&amp;lt;div class='compound level-"&lt;/span&gt; + std::to_string(depth) + &lt;span class='string_literal'&gt;"'&amp;gt;"&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN120"&gt;120&lt;/td&gt;&lt;td class="line"&gt;        buffer.InsertText(offset, div, &lt;span class='keyword'&gt;false&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN121"&gt;121&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='comment'&gt;//auto column = source_manager_.getSpellingColumnNumber(start);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN122"&gt;122&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='comment'&gt;// auto cstart2 = source_manager_.translateLineCol(source_manager_.getMainFileID(), line, 0);&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN123"&gt;123&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='comment'&gt;// auto cstart = statement-&amp;gt;getLocStart();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN124"&gt;124&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN125"&gt;125&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='comment'&gt;// rewriter_.InsertText(statement-&amp;gt;getLocStart(), "/**/");&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN126"&gt;126&lt;/td&gt;&lt;td class="line"&gt;        ++depth;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN127"&gt;127&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='comment'&gt;// std::cerr &amp;lt;&amp;lt; "Entering compound " &amp;lt;&amp;lt; cstart.printToString(source_manager_) &amp;lt;&amp;lt; " or " &amp;lt;&amp;lt; cstart2.printToString(source_manager_) &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN128"&gt;128&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='keyword'&gt;auto&lt;/span&gt; result = RecursiveASTVisitor&amp;lt;MyASTVisitor&amp;gt;::TraverseStmt(s);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN129"&gt;129&lt;/td&gt;&lt;td class="line"&gt;        --depth;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN130"&gt;130&lt;/td&gt;&lt;td class="line"&gt;        rewriter_.InsertTextAfterToken(statement-&amp;gt;getLocEnd(), &lt;span class='string_literal'&gt;"&amp;lt;/div&amp;gt;"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN131"&gt;131&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='comment'&gt;//std::cerr &amp;lt;&amp;lt; "Exiting compound " &amp;lt;&amp;lt; statement-&amp;gt;getLocEnd().printToString(source_manager_) &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN132"&gt;132&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='keyword'&gt;return&lt;/span&gt; result;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN133"&gt;133&lt;/td&gt;&lt;td class="line"&gt;      }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN134"&gt;134&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN135"&gt;135&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN136"&gt;136&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; RecursiveASTVisitor&amp;lt;MyASTVisitor&amp;gt;::TraverseStmt(s);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN137"&gt;137&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN138"&gt;138&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN139"&gt;139&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;bool&lt;/span&gt; VisitStmt(Stmt *s) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN140"&gt;140&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//    std::cerr &amp;lt;&amp;lt; "Visiting statement " &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN141"&gt;141&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN142"&gt;142&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#if 0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN143"&gt;143&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='comment'&gt;// Only care about If statements.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN144"&gt;144&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;if&lt;/span&gt; (isa&amp;lt;IfStmt&amp;gt;(s)) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN145"&gt;145&lt;/td&gt;&lt;td class="line"&gt;      IfStmt *IfStatement = cast&amp;lt;IfStmt&amp;gt;(s);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN146"&gt;146&lt;/td&gt;&lt;td class="line"&gt;      Stmt *Then = IfStatement-&amp;gt;getThen();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN147"&gt;147&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN148"&gt;148&lt;/td&gt;&lt;td class="line"&gt;      rewriter_.InsertText(Then-&amp;gt;getLocStart(), &lt;span class='string_literal'&gt;"// the 'if' part\n"&lt;/span&gt;, &lt;span class='keyword'&gt;true&lt;/span&gt;,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN149"&gt;149&lt;/td&gt;&lt;td class="line"&gt;                             &lt;span class='keyword'&gt;true&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN150"&gt;150&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN151"&gt;151&lt;/td&gt;&lt;td class="line"&gt;      Stmt *Else = IfStatement-&amp;gt;getElse();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN152"&gt;152&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;if&lt;/span&gt; (Else)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN153"&gt;153&lt;/td&gt;&lt;td class="line"&gt;        rewriter_.InsertText(Else-&amp;gt;getLocStart(), &lt;span class='string_literal'&gt;"// the 'else' part\n"&lt;/span&gt;,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN154"&gt;154&lt;/td&gt;&lt;td class="line"&gt;                               &lt;span class='keyword'&gt;true&lt;/span&gt;, &lt;span class='keyword'&gt;true&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN155"&gt;155&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN156"&gt;156&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#endif&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN157"&gt;157&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN158"&gt;158&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; &lt;span class='keyword'&gt;true&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN159"&gt;159&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN160"&gt;160&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN161"&gt;161&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;bool&lt;/span&gt; VisitBlockDecl(BlockDecl *d) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN162"&gt;162&lt;/td&gt;&lt;td class="line"&gt;    std::cerr &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"Visiting block "&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN163"&gt;163&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; &lt;span class='keyword'&gt;true&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN164"&gt;164&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN165"&gt;165&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN166"&gt;166&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;bool&lt;/span&gt; VisitFunctionDecl(FunctionDecl *f) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN167"&gt;167&lt;/td&gt;&lt;td class="line"&gt;    std::cerr &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"Visiting function "&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN168"&gt;168&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN169"&gt;169&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='comment'&gt;// Only function definitions (with bodies), not declarations.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN170"&gt;170&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;if&lt;/span&gt; (f-&amp;gt;hasBody()) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN171"&gt;171&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN172"&gt;172&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Type name as string&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN173"&gt;173&lt;/td&gt;&lt;td class="line"&gt;      QualType QT = f-&amp;gt;getReturnType();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN174"&gt;174&lt;/td&gt;&lt;td class="line"&gt;      std::string TypeStr = QT.getAsString();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN175"&gt;175&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN176"&gt;176&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Function name&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN177"&gt;177&lt;/td&gt;&lt;td class="line"&gt;      DeclarationName DeclName = f-&amp;gt;getNameInfo().getName();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN178"&gt;178&lt;/td&gt;&lt;td class="line"&gt;      std::string FuncName = DeclName.getAsString();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN179"&gt;179&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN180"&gt;180&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Add comment before&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN181"&gt;181&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#if 0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN182"&gt;182&lt;/td&gt;&lt;td class="line"&gt;      std::stringstream SSBefore;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN183"&gt;183&lt;/td&gt;&lt;td class="line"&gt;      SSBefore &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"// Begin function "&lt;/span&gt; &amp;lt;&amp;lt; FuncName &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;" returning "&lt;/span&gt; &amp;lt;&amp;lt; TypeStr&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN184"&gt;184&lt;/td&gt;&lt;td class="line"&gt;               &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"\n"&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN185"&gt;185&lt;/td&gt;&lt;td class="line"&gt;      SourceLocation source_location = f-&amp;gt;getSourceRange().getBegin();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN186"&gt;186&lt;/td&gt;&lt;td class="line"&gt;      rewriter_.InsertText(source_location, SSBefore.str(), &lt;span class='keyword'&gt;true&lt;/span&gt;, &lt;span class='keyword'&gt;true&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN187"&gt;187&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#endif&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN188"&gt;188&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN189"&gt;189&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#if 0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN190"&gt;190&lt;/td&gt;&lt;td class="line"&gt;      Stmt *FuncBody = f-&amp;gt;getBody();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN191"&gt;191&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// And after&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN192"&gt;192&lt;/td&gt;&lt;td class="line"&gt;      std::stringstream SSAfter;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN193"&gt;193&lt;/td&gt;&lt;td class="line"&gt;      SSAfter &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"\n// End function "&lt;/span&gt; &amp;lt;&amp;lt; FuncName;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN194"&gt;194&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;auto&lt;/span&gt; source_location = FuncBody-&amp;gt;getLocEnd().getLocWithOffset(1);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN195"&gt;195&lt;/td&gt;&lt;td class="line"&gt;      rewriter_.InsertText(source_location, SSAfter.str(), &lt;span class='keyword'&gt;true&lt;/span&gt;, &lt;span class='keyword'&gt;true&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN196"&gt;196&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='directive'&gt;#endif&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN197"&gt;197&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN198"&gt;198&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;auto&lt;/span&gt; source_location = f-&amp;gt;getReturnTypeSourceRange().getEnd();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN199"&gt;199&lt;/td&gt;&lt;td class="line"&gt;      rewriter_.InsertTextAfterToken(source_location, &lt;span class='string_literal'&gt;"&amp;lt;/span&amp;gt;"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN200"&gt;200&lt;/td&gt;&lt;td class="line"&gt;      source_location = f-&amp;gt;getReturnTypeSourceRange().getBegin();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN201"&gt;201&lt;/td&gt;&lt;td class="line"&gt;      rewriter_.InsertTextBefore(source_location, &lt;span class='string_literal'&gt;"&amp;lt;span class='type'&amp;gt;"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN202"&gt;202&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN203"&gt;203&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN204"&gt;204&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; &lt;span class='keyword'&gt;true&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN205"&gt;205&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN206"&gt;206&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN207"&gt;207&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;private&lt;/span&gt;:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN208"&gt;208&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;//Id id_;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN209"&gt;209&lt;/td&gt;&lt;td class="line"&gt;  Rewriter &amp;amp;rewriter_;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN210"&gt;210&lt;/td&gt;&lt;td class="line"&gt;  SourceManager &amp;amp;source_manager_;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN211"&gt;211&lt;/td&gt;&lt;td class="line"&gt;};&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN212"&gt;212&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN213"&gt;213&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// Implementation of the ASTConsumer interface for reading an AST produced&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN214"&gt;214&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;// by the Clang parser.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN215"&gt;215&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;class&lt;/span&gt; MyASTConsumer : &lt;span class='keyword'&gt;public&lt;/span&gt; ASTConsumer {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN216"&gt;216&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;public&lt;/span&gt;:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN217"&gt;217&lt;/td&gt;&lt;td class="line"&gt;  MyASTConsumer(Rewriter &amp;amp;rewriter, SourceManager &amp;amp;source_manager) : visitor_(rewriter, source_manager) {}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN218"&gt;218&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN219"&gt;219&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Override the method that gets called for each parsed top-level&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN220"&gt;220&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// declaration.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN221"&gt;221&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;virtual&lt;/span&gt; &lt;span class='keyword'&gt;bool&lt;/span&gt; HandleTopLevelDecl(DeclGroupRef DR) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN222"&gt;222&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;for&lt;/span&gt; (DeclGroupRef::iterator b = DR.begin(), e = DR.end(); b != e; ++b)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN223"&gt;223&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Traverse the declaration using our AST visitor.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN224"&gt;224&lt;/td&gt;&lt;td class="line"&gt;      visitor_.TraverseDecl(*b);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN225"&gt;225&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; &lt;span class='keyword'&gt;true&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN226"&gt;226&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN227"&gt;227&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN228"&gt;228&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;private&lt;/span&gt;:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN229"&gt;229&lt;/td&gt;&lt;td class="line"&gt;  MyASTVisitor visitor_;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN230"&gt;230&lt;/td&gt;&lt;td class="line"&gt;};&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN231"&gt;231&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN232"&gt;232&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN233"&gt;233&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;void&lt;/span&gt; HighlightRange(RewriteBuffer &amp;amp;RB, &lt;span class='keyword'&gt;unsigned&lt;/span&gt; B, &lt;span class='keyword'&gt;unsigned&lt;/span&gt; E,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN234"&gt;234&lt;/td&gt;&lt;td class="line"&gt;                          &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt; *BufferStart,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN235"&gt;235&lt;/td&gt;&lt;td class="line"&gt;                          &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt; *StartTag, &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt; *EndTag) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN236"&gt;236&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Insert the tag at the absolute start/end of the range.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN237"&gt;237&lt;/td&gt;&lt;td class="line"&gt;  RB.InsertTextAfter(B, StartTag);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN238"&gt;238&lt;/td&gt;&lt;td class="line"&gt;  RB.InsertTextBefore(E, EndTag);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN239"&gt;239&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN240"&gt;240&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Scan the range to see if there is a \r or \n.  If so, and if the line is&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN241"&gt;241&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// not blank, insert tags on that line as well.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN242"&gt;242&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;bool&lt;/span&gt; HadOpenTag = &lt;span class='keyword'&gt;true&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN243"&gt;243&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN244"&gt;244&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;unsigned&lt;/span&gt; LastNonWhiteSpace = B;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN245"&gt;245&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;for&lt;/span&gt; (&lt;span class='keyword'&gt;unsigned&lt;/span&gt; i = B; i != E; ++i) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN246"&gt;246&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;switch&lt;/span&gt; (BufferStart[i]) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN247"&gt;247&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; '\r':&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN248"&gt;248&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; '\n':&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN249"&gt;249&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Okay, we found a newline in the range.  If we have an open tag, we need&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN250"&gt;250&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// to insert a close tag at the first non-whitespace before the newline.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN251"&gt;251&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;if&lt;/span&gt; (HadOpenTag)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN252"&gt;252&lt;/td&gt;&lt;td class="line"&gt;        RB.InsertTextBefore(LastNonWhiteSpace+1, EndTag);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN253"&gt;253&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN254"&gt;254&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Instead of inserting an open tag immediately after the newline, we&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN255"&gt;255&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// wait until we see a non-whitespace character.  This prevents us from&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN256"&gt;256&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// inserting tags around blank lines, and also allows the open tag to&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN257"&gt;257&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// be put *after* whitespace on a non-blank line.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN258"&gt;258&lt;/td&gt;&lt;td class="line"&gt;      HadOpenTag = &lt;span class='keyword'&gt;false&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN259"&gt;259&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN260"&gt;260&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; '\0':&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN261"&gt;261&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; ' ':&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN262"&gt;262&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; '\t':&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN263"&gt;263&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; '\f':&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN264"&gt;264&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; '\v':&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN265"&gt;265&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Ignore whitespace.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN266"&gt;266&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN267"&gt;267&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN268"&gt;268&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;default&lt;/span&gt;:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN269"&gt;269&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// If there is no tag open, do it now.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN270"&gt;270&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;if&lt;/span&gt; (!HadOpenTag) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN271"&gt;271&lt;/td&gt;&lt;td class="line"&gt;        RB.InsertTextAfter(i, StartTag);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN272"&gt;272&lt;/td&gt;&lt;td class="line"&gt;        HadOpenTag = &lt;span class='keyword'&gt;true&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN273"&gt;273&lt;/td&gt;&lt;td class="line"&gt;      }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN274"&gt;274&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN275"&gt;275&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Remember this character.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN276"&gt;276&lt;/td&gt;&lt;td class="line"&gt;      LastNonWhiteSpace = i;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN277"&gt;277&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN278"&gt;278&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN279"&gt;279&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN280"&gt;280&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN281"&gt;281&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;void&lt;/span&gt; HighlightRange(Rewriter &amp;amp;R, SourceLocation B, SourceLocation E,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN282"&gt;282&lt;/td&gt;&lt;td class="line"&gt;                          &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt; *StartTag, &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt; *EndTag) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN283"&gt;283&lt;/td&gt;&lt;td class="line"&gt;  SourceManager &amp;amp;SM = R.getSourceMgr();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN284"&gt;284&lt;/td&gt;&lt;td class="line"&gt;  B = SM.getExpansionLoc(B);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN285"&gt;285&lt;/td&gt;&lt;td class="line"&gt;  E = SM.getExpansionLoc(E);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN286"&gt;286&lt;/td&gt;&lt;td class="line"&gt;  FileID FID = SM.getFileID(B);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN287"&gt;287&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='macro'&gt;assert(SM.getFileID(E) == FID &amp;amp;&amp;amp; &lt;span class='string_literal'&gt;"B/E not in the same file!"&lt;/span&gt;)&lt;span class='expansion'&gt;(static_cast&amp;lt;void&amp;gt; (0))&lt;/span&gt;&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN288"&gt;288&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN289"&gt;289&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;unsigned&lt;/span&gt; BOffset = SM.getFileOffset(B);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN290"&gt;290&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;unsigned&lt;/span&gt; EOffset = SM.getFileOffset(E);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN291"&gt;291&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN292"&gt;292&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Include the whole end token in the range.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN293"&gt;293&lt;/td&gt;&lt;td class="line"&gt;  EOffset += Lexer::MeasureTokenLength(E, R.getSourceMgr(), R.getLangOpts());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN294"&gt;294&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN295"&gt;295&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;bool&lt;/span&gt; Invalid = &lt;span class='keyword'&gt;false&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN296"&gt;296&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt; *BufferStart = SM.getBufferData(FID, &amp;amp;Invalid).data();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN297"&gt;297&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;if&lt;/span&gt; (Invalid)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN298"&gt;298&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN299"&gt;299&lt;/td&gt;&lt;td class="line"&gt;  &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN300"&gt;300&lt;/td&gt;&lt;td class="line"&gt;  HighlightRange(R.getEditBuffer(FID), BOffset, EOffset,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN301"&gt;301&lt;/td&gt;&lt;td class="line"&gt;                 BufferStart, StartTag, EndTag);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN302"&gt;302&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN303"&gt;303&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;void&lt;/span&gt; RawHighlight(Rewriter &amp;amp;R, FileID FID, &lt;span class='keyword'&gt;const&lt;/span&gt; Preprocessor &amp;amp;PP) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN304"&gt;304&lt;/td&gt;&lt;td class="line"&gt;  RewriteBuffer &amp;amp;RB = R.getEditBuffer(FID);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN305"&gt;305&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN306"&gt;306&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;const&lt;/span&gt; SourceManager &amp;amp;SM = PP.getSourceManager();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN307"&gt;307&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;const&lt;/span&gt; llvm::MemoryBuffer *FromFile = SM.getBuffer(FID);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN308"&gt;308&lt;/td&gt;&lt;td class="line"&gt;  Lexer L(FID, FromFile, SM, PP.getLangOpts());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN309"&gt;309&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt; *BufferStart = L.getBuffer().data();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN310"&gt;310&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN311"&gt;311&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Inform the preprocessor that we want to retain comments as tokens, so we&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN312"&gt;312&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// can highlight them.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN313"&gt;313&lt;/td&gt;&lt;td class="line"&gt;  L.SetCommentRetentionState(&lt;span class='keyword'&gt;true&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN314"&gt;314&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN315"&gt;315&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Lex all the tokens in raw mode, to avoid entering #includes or expanding&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN316"&gt;316&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// macros.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN317"&gt;317&lt;/td&gt;&lt;td class="line"&gt;  Token Tok;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN318"&gt;318&lt;/td&gt;&lt;td class="line"&gt;  L.LexFromRawLexer(Tok);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN319"&gt;319&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN320"&gt;320&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;while&lt;/span&gt; (Tok.isNot(tok::eof)) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN321"&gt;321&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;unsigned&lt;/span&gt; TokOffs = SM.getFileOffset(Tok.getLocation());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN322"&gt;322&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;unsigned&lt;/span&gt; TokLen = Tok.getLength();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN323"&gt;323&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;switch&lt;/span&gt; (Tok.getKind()) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN324"&gt;324&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;default&lt;/span&gt;: &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN325"&gt;325&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::comment:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN326"&gt;326&lt;/td&gt;&lt;td class="line"&gt;      HighlightRange(RB, TokOffs, TokOffs+TokLen, BufferStart,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN327"&gt;327&lt;/td&gt;&lt;td class="line"&gt;                     &lt;span class='string_literal'&gt;"&amp;lt;span class='comment'&amp;gt;"&lt;/span&gt;, &lt;span class='string_literal'&gt;"&amp;lt;/span&amp;gt;"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN328"&gt;328&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN329"&gt;329&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::utf8_string_literal:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN330"&gt;330&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Chop off the u part of u8 prefix&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN331"&gt;331&lt;/td&gt;&lt;td class="line"&gt;      ++TokOffs;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN332"&gt;332&lt;/td&gt;&lt;td class="line"&gt;      --TokLen;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN333"&gt;333&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// FALL THROUGH to chop the 8&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN334"&gt;334&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::wide_string_literal:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN335"&gt;335&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::utf16_string_literal:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN336"&gt;336&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::utf32_string_literal:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN337"&gt;337&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Chop off the L, u, U or 8 prefix&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN338"&gt;338&lt;/td&gt;&lt;td class="line"&gt;      ++TokOffs;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN339"&gt;339&lt;/td&gt;&lt;td class="line"&gt;      --TokLen;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN340"&gt;340&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// FALL THROUGH.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN341"&gt;341&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::string_literal:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN342"&gt;342&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// FIXME: Exclude the optional ud-suffix from the highlighted range.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN343"&gt;343&lt;/td&gt;&lt;td class="line"&gt;      HighlightRange(RB, TokOffs, TokOffs+TokLen, BufferStart,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN344"&gt;344&lt;/td&gt;&lt;td class="line"&gt;                     &lt;span class='string_literal'&gt;"&amp;lt;span class='string'&amp;gt;"&lt;/span&gt;, &lt;span class='string_literal'&gt;"&amp;lt;/span&amp;gt;"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN345"&gt;345&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN346"&gt;346&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::numeric_constant:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN347"&gt;347&lt;/td&gt;&lt;td class="line"&gt;      HighlightRange(RB, TokOffs, TokOffs+TokLen, BufferStart,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN348"&gt;348&lt;/td&gt;&lt;td class="line"&gt;                     &lt;span class='string_literal'&gt;"&amp;lt;span class='numeric'&amp;gt;"&lt;/span&gt;, &lt;span class='string_literal'&gt;"&amp;lt;/span&amp;gt;"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN349"&gt;349&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN350"&gt;350&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::utf8_char_constant:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN351"&gt;351&lt;/td&gt;&lt;td class="line"&gt;      ++TokOffs;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN352"&gt;352&lt;/td&gt;&lt;td class="line"&gt;      --TokLen;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN353"&gt;353&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::wide_char_constant:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN354"&gt;354&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::utf16_char_constant:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN355"&gt;355&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::utf32_char_constant:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN356"&gt;356&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Chop off the L, u, U or 8 prefix&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN357"&gt;357&lt;/td&gt;&lt;td class="line"&gt;      ++TokOffs;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN358"&gt;358&lt;/td&gt;&lt;td class="line"&gt;      --TokLen;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN359"&gt;359&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::char_constant:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN360"&gt;360&lt;/td&gt;&lt;td class="line"&gt;      HighlightRange(RB, TokOffs, TokOffs+TokLen, BufferStart,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN361"&gt;361&lt;/td&gt;&lt;td class="line"&gt;                     &lt;span class='string_literal'&gt;"&amp;lt;span class='char'&amp;gt;"&lt;/span&gt;, &lt;span class='string_literal'&gt;"&amp;lt;/span&amp;gt;"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN362"&gt;362&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN363"&gt;363&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;case&lt;/span&gt; tok::hash: {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN364"&gt;364&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// If this is a preprocessor directive, all tokens to end of line are too.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN365"&gt;365&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;if&lt;/span&gt; (!Tok.isAtStartOfLine())&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN366"&gt;366&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='keyword'&gt;break&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN367"&gt;367&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN368"&gt;368&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Eat all of the tokens until we get to the next one at the start of&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN369"&gt;369&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// line.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN370"&gt;370&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;unsigned&lt;/span&gt; TokEnd = TokOffs+TokLen;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN371"&gt;371&lt;/td&gt;&lt;td class="line"&gt;      L.LexFromRawLexer(Tok);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN372"&gt;372&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;while&lt;/span&gt; (!Tok.isAtStartOfLine() &amp;amp;&amp;amp; Tok.isNot(tok::eof)) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN373"&gt;373&lt;/td&gt;&lt;td class="line"&gt;        TokEnd = SM.getFileOffset(Tok.getLocation())+Tok.getLength();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN374"&gt;374&lt;/td&gt;&lt;td class="line"&gt;        L.LexFromRawLexer(Tok);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN375"&gt;375&lt;/td&gt;&lt;td class="line"&gt;      }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN376"&gt;376&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN377"&gt;377&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Find end of line.  This is a hack.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN378"&gt;378&lt;/td&gt;&lt;td class="line"&gt;      HighlightRange(RB, TokOffs, TokEnd, BufferStart,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN379"&gt;379&lt;/td&gt;&lt;td class="line"&gt;                     &lt;span class='string_literal'&gt;"&amp;lt;span class='directive'&amp;gt;"&lt;/span&gt;, &lt;span class='string_literal'&gt;"&amp;lt;/span&amp;gt;"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN380"&gt;380&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN381"&gt;381&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Don't skip the next token.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN382"&gt;382&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;continue&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN383"&gt;383&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN384"&gt;384&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN385"&gt;385&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN386"&gt;386&lt;/td&gt;&lt;td class="line"&gt;    L.LexFromRawLexer(Tok);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN387"&gt;387&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN388"&gt;388&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN389"&gt;389&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN390"&gt;390&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN391"&gt;391&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN392"&gt;392&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;void&lt;/span&gt; WrapIt(Rewriter&amp;amp; R, FileID FID, &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt; *title) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN393"&gt;393&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN394"&gt;394&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;const&lt;/span&gt; llvm::MemoryBuffer *Buf = R.getSourceMgr().getBuffer(FID);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN395"&gt;395&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt;* FileStart = Buf-&amp;gt;getBufferStart();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN396"&gt;396&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;char&lt;/span&gt;* FileEnd = Buf-&amp;gt;getBufferEnd();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN397"&gt;397&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN398"&gt;398&lt;/td&gt;&lt;td class="line"&gt;  SourceLocation StartLoc = R.getSourceMgr().getLocForStartOfFile(FID);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN399"&gt;399&lt;/td&gt;&lt;td class="line"&gt;  SourceLocation EndLoc = StartLoc.getLocWithOffset(FileEnd-FileStart);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN400"&gt;400&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN401"&gt;401&lt;/td&gt;&lt;td class="line"&gt;  std::string s;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN402"&gt;402&lt;/td&gt;&lt;td class="line"&gt;  llvm::raw_string_ostream os(s);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN403"&gt;403&lt;/td&gt;&lt;td class="line"&gt;  os &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"&amp;lt;!doctype html&amp;gt;\n"&lt;/span&gt; &lt;span class='comment'&gt;// Use HTML 5 doctype&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN404"&gt;404&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='string_literal'&gt;"&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n"&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN405"&gt;405&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN406"&gt;406&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;if&lt;/span&gt; (title)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN407"&gt;407&lt;/td&gt;&lt;td class="line"&gt;    os &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"&amp;lt;title&amp;gt;"&lt;/span&gt; &amp;lt;&amp;lt; html::EscapeText(title) &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"&amp;lt;/title&amp;gt;\n"&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN408"&gt;408&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN409"&gt;409&lt;/td&gt;&lt;td class="line"&gt;  os &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"&amp;lt;style type=\"text/css\"&amp;gt;\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN410"&gt;410&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// " body { color:#000000; background-color:#ffffff }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN411"&gt;411&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" body { font-family:Helvetica, sans-serif; font-size:10pt }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN412"&gt;412&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" h1 { font-size:14pt }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN413"&gt;413&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .type { color: green}\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN414"&gt;414&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .code { border-collapse:collapse; width:100%; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN415"&gt;415&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .code { font-family: \"Monospace\", monospace; font-size:10pt }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN416"&gt;416&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .code { line-height: 1.2em }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN417"&gt;417&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .compound { display: inline-block; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN418"&gt;418&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .compound.level-0:hover { margin-left: 1px; border-left-style: solid; border-left-color: yellow; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN419"&gt;419&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .compound.level-1:hover { margin-left: 2px; border-left-style: solid; border-left-color: green; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN420"&gt;420&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .compound.level-2:hover { margin-left: 3px; border-left-style: solid; border-left-color: orange; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN421"&gt;421&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .comment { color: magenta; font-style: oblique }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN422"&gt;422&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .string { color: purple; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN423"&gt;423&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .numeric { color: purple; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN424"&gt;424&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .char { color: purple; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN425"&gt;425&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .directive { color: blue; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN426"&gt;426&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN427"&gt;427&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='comment'&gt;// Macro expansions.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN428"&gt;428&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .expansion { display: none; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN429"&gt;429&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .macro:hover .expansion { display: block; border: 2px solid #FF0000; "&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN430"&gt;430&lt;/td&gt;&lt;td class="line"&gt;          &lt;span class='string_literal'&gt;"padding: 2px; background-color:#FFF0F0; font-weight: normal; "&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN431"&gt;431&lt;/td&gt;&lt;td class="line"&gt;          &lt;span class='string_literal'&gt;"  -webkit-border-radius:5px;  -webkit-box-shadow:1px 1px 7px #000; "&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN432"&gt;432&lt;/td&gt;&lt;td class="line"&gt;          &lt;span class='string_literal'&gt;"position: absolute; top: -1em; left:10em; z-index: 1 } \n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN433"&gt;433&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .macro { color: darkmagenta; background-color:LemonChiffon;"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN434"&gt;434&lt;/td&gt;&lt;td class="line"&gt;             &lt;span class='comment'&gt;// Macros are position: relative to provide base for expansions.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN435"&gt;435&lt;/td&gt;&lt;td class="line"&gt;             &lt;span class='string_literal'&gt;" position: relative }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN436"&gt;436&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .num { width:2.5em; padding-right:2ex; background-color:#eeeeee }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN437"&gt;437&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .num { text-align:right; font-size:8pt }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN438"&gt;438&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .num { color:#444444 }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN439"&gt;439&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .line { padding-left: 1ex; border-left: 3px solid #ccc }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN440"&gt;440&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .line { white-space: pre }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN441"&gt;441&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msg { -webkit-box-shadow:1px 1px 7px #000 }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN442"&gt;442&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msg { -webkit-border-radius:5px }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN443"&gt;443&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msg { font-family:Helvetica, sans-serif; font-size:8pt }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN444"&gt;444&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msg { float:left }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN445"&gt;445&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msg { padding:0.25em 1ex 0.25em 1ex }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN446"&gt;446&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msg { margin-top:10px; margin-bottom:10px }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN447"&gt;447&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msg { font-weight:bold }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN448"&gt;448&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msg { max-width:60em; word-wrap: break-word; white-space: pre-wrap }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN449"&gt;449&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msgT { padding:0x; spacing:0x }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN450"&gt;450&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msgEvent { background-color:#fff8b4; color:#000000 }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN451"&gt;451&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .msgControl { background-color:#bbbbbb; color:#000000 }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN452"&gt;452&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .mrange { background-color:#dfddf3 }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN453"&gt;453&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .mrange { border-bottom:1px solid #6F9DBE }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN454"&gt;454&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .PathIndex { font-weight: bold; padding:0px 5px; "&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN455"&gt;455&lt;/td&gt;&lt;td class="line"&gt;        &lt;span class='string_literal'&gt;"margin-right:5px; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN456"&gt;456&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .PathIndex { -webkit-border-radius:8px }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN457"&gt;457&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .PathIndexEvent { background-color:#bfba87 }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN458"&gt;458&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .PathIndexControl { background-color:#8c8c8c }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN459"&gt;459&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .PathNav a { text-decoration:none; font-size: larger }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN460"&gt;460&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .CodeInsertionHint { font-weight: bold; background-color: #10dd10 }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN461"&gt;461&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .CodeRemovalHint { background-color:#de1010 }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN462"&gt;462&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" .CodeRemovalHint { border-bottom:1px solid #6F9DBE }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN463"&gt;463&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" table.simpletable {\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN464"&gt;464&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;"   padding: 5px;\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN465"&gt;465&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;"   font-size:12pt;\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN466"&gt;466&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;"   margin:20px;\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN467"&gt;467&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;"   border-collapse: collapse; border-spacing: 0px;\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN468"&gt;468&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN469"&gt;469&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;" td.rowname {\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN470"&gt;470&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;"   text-align:right; font-weight:bold; color:#444444;\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN471"&gt;471&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;"   padding-right:2ex; }\n"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN472"&gt;472&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='string_literal'&gt;"&amp;lt;/style&amp;gt;\n&amp;lt;/head&amp;gt;\n&amp;lt;body&amp;gt;&amp;lt;pre class='code'&amp;gt;"&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN473"&gt;473&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN474"&gt;474&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Generate header&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN475"&gt;475&lt;/td&gt;&lt;td class="line"&gt;  R.InsertTextBefore(StartLoc, os.str());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN476"&gt;476&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Generate footer&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN477"&gt;477&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN478"&gt;478&lt;/td&gt;&lt;td class="line"&gt;  R.InsertTextAfter(EndLoc, &lt;span class='string_literal'&gt;"&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\n"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN479"&gt;479&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN480"&gt;480&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN481"&gt;481&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;template&lt;/span&gt;&amp;lt; &lt;span class='keyword'&gt;typename&lt;/span&gt; T &amp;gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN482"&gt;482&lt;/td&gt;&lt;td class="line"&gt;std::string ToHex( T i )&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN483"&gt;483&lt;/td&gt;&lt;td class="line"&gt;{&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN484"&gt;484&lt;/td&gt;&lt;td class="line"&gt;    std::stringstream stream;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN485"&gt;485&lt;/td&gt;&lt;td class="line"&gt;    stream &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN486"&gt;486&lt;/td&gt;&lt;td class="line"&gt;           &amp;lt;&amp;lt; std::setfill ('0') &amp;lt;&amp;lt; std::setw(&lt;span class='keyword'&gt;sizeof&lt;/span&gt;(T)*2) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN487"&gt;487&lt;/td&gt;&lt;td class="line"&gt;           &amp;lt;&amp;lt; std::hex &amp;lt;&amp;lt; i;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN488"&gt;488&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; stream.str();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN489"&gt;489&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN490"&gt;490&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN491"&gt;491&lt;/td&gt;&lt;td class="line"&gt;std::string Join(&lt;span class='keyword'&gt;const&lt;/span&gt; std::initializer_list&amp;lt;std::string&amp;gt;&amp;amp; paths) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN492"&gt;492&lt;/td&gt;&lt;td class="line"&gt;  std::string result;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN493"&gt;493&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;if&lt;/span&gt; (!paths.size())&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN494"&gt;494&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; result;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN495"&gt;495&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN496"&gt;496&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Append all elements of the list, followed by a "/".&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN497"&gt;497&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;for&lt;/span&gt; (&lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;auto&lt;/span&gt;&amp;amp; path : paths) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN498"&gt;498&lt;/td&gt;&lt;td class="line"&gt;    result.append(path);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN499"&gt;499&lt;/td&gt;&lt;td class="line"&gt;    result.append(&lt;span class='string_literal'&gt;"/"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN500"&gt;500&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN501"&gt;501&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN502"&gt;502&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Remove last trailing "/".&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN503"&gt;503&lt;/td&gt;&lt;td class="line"&gt;  result.resize(result.size() - 1);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN504"&gt;504&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;return&lt;/span&gt; result;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN505"&gt;505&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN506"&gt;506&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN507"&gt;507&lt;/td&gt;&lt;td class="line"&gt;std::string MakeSourcePath(&lt;span class='keyword'&gt;unsigned&lt;/span&gt; hash) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN508"&gt;508&lt;/td&gt;&lt;td class="line"&gt;  std::string hex = ToHex(hash);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN509"&gt;509&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;auto&lt;/span&gt; end = hex.length();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN510"&gt;510&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;return&lt;/span&gt; Join({&lt;span class='string_literal'&gt;"output"&lt;/span&gt;, &lt;span class='string_literal'&gt;"sources"&lt;/span&gt;, hex.substr(end - 2), hex.substr(0, end - 2) + &lt;span class='string_literal'&gt;".html"&lt;/span&gt;});&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN511"&gt;511&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN512"&gt;512&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN513"&gt;513&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;bool&lt;/span&gt; MakeDirs(&lt;span class='keyword'&gt;const&lt;/span&gt; std::string&amp;amp; path, &lt;span class='keyword'&gt;int&lt;/span&gt; mode) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN514"&gt;514&lt;/td&gt;&lt;td class="line"&gt;  std::string copy(path);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN515"&gt;515&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN516"&gt;516&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;for&lt;/span&gt; (std::size_t index = 1;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN517"&gt;517&lt;/td&gt;&lt;td class="line"&gt;       (index = copy.find('/', index)) != std::string::npos;) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN518"&gt;518&lt;/td&gt;&lt;td class="line"&gt;    copy[index] = '\0';&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN519"&gt;519&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;if&lt;/span&gt; (!mkdir(copy.c_str(), mode) &amp;amp;&amp;amp; &lt;span class='macro'&gt;errno&lt;span class='expansion'&gt;(*__errno_location ())&lt;/span&gt;&lt;/span&gt; != &lt;span class='macro'&gt;EEXIST&lt;span class='expansion'&gt;17&lt;/span&gt;&lt;/span&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN520"&gt;520&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;return&lt;/span&gt; &lt;span class='keyword'&gt;false&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN521"&gt;521&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN522"&gt;522&lt;/td&gt;&lt;td class="line"&gt;    copy[index] = '/';&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN523"&gt;523&lt;/td&gt;&lt;td class="line"&gt;    index = index + 1;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN524"&gt;524&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN525"&gt;525&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;return&lt;/span&gt; &lt;span class='keyword'&gt;true&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN526"&gt;526&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN527"&gt;527&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN528"&gt;528&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN529"&gt;529&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='keyword'&gt;int&lt;/span&gt; main(&lt;span class='keyword'&gt;int&lt;/span&gt; argc, &lt;span class='keyword'&gt;char&lt;/span&gt; *argv[]) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN530"&gt;530&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;if&lt;/span&gt; (argc &amp;lt; 2) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN531"&gt;531&lt;/td&gt;&lt;td class="line"&gt;    llvm::errs() &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"Usage: rewritersample &amp;lt;filename&amp;gt;...\n"&lt;/span&gt;;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN532"&gt;532&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;return&lt;/span&gt; 1;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN533"&gt;533&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN534"&gt;534&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN535"&gt;535&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// CompilerInstance will hold the instance of the Clang compiler for us,&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN536"&gt;536&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// managing the various objects needed to run the compiler.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN537"&gt;537&lt;/td&gt;&lt;td class="line"&gt;  CompilerInstance ci;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN538"&gt;538&lt;/td&gt;&lt;td class="line"&gt;  ci.createDiagnostics();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN539"&gt;539&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN540"&gt;540&lt;/td&gt;&lt;td class="line"&gt;  LangOptions &amp;amp;lo = ci.getLangOpts();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN541"&gt;541&lt;/td&gt;&lt;td class="line"&gt;  lo.CPlusPlus = 1;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN542"&gt;542&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN543"&gt;543&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Initialize target info with the default triple for our platform.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN544"&gt;544&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;auto&lt;/span&gt; target_options = std::make_shared&amp;lt;TargetOptions&amp;gt;();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN545"&gt;545&lt;/td&gt;&lt;td class="line"&gt;  target_options-&amp;gt;Triple = llvm::sys::getDefaultTargetTriple();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN546"&gt;546&lt;/td&gt;&lt;td class="line"&gt;  TargetInfo *target_info =&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN547"&gt;547&lt;/td&gt;&lt;td class="line"&gt;      TargetInfo::CreateTargetInfo(ci.getDiagnostics(), target_options);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN548"&gt;548&lt;/td&gt;&lt;td class="line"&gt;  ci.setTarget(target_info);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN549"&gt;549&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN550"&gt;550&lt;/td&gt;&lt;td class="line"&gt;  ci.createFileManager();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN551"&gt;551&lt;/td&gt;&lt;td class="line"&gt;  FileManager &amp;amp;file_mgr = ci.getFileManager();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN552"&gt;552&lt;/td&gt;&lt;td class="line"&gt;  ci.createSourceManager(file_mgr);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN553"&gt;553&lt;/td&gt;&lt;td class="line"&gt;  SourceManager &amp;amp;source_mgr = ci.getSourceManager();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN554"&gt;554&lt;/td&gt;&lt;td class="line"&gt;  ci.createPreprocessor(TU_Module);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN555"&gt;555&lt;/td&gt;&lt;td class="line"&gt;  ci.createASTContext();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN556"&gt;556&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN557"&gt;557&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// A Rewriter helps us manage the code rewriting task.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN558"&gt;558&lt;/td&gt;&lt;td class="line"&gt;  Rewriter rewriter;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN559"&gt;559&lt;/td&gt;&lt;td class="line"&gt;  rewriter.setSourceMgr(source_mgr, ci.getLangOpts());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN560"&gt;560&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN561"&gt;561&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// Create an AST consumer instance which is going to get called by&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN562"&gt;562&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='comment'&gt;// ParseAST.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN563"&gt;563&lt;/td&gt;&lt;td class="line"&gt;  MyASTConsumer consumer(rewriter, source_mgr);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN564"&gt;564&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN565"&gt;565&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;for&lt;/span&gt; (&lt;span class='keyword'&gt;int&lt;/span&gt; i = 1; i &amp;lt; argc; ++i) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN566"&gt;566&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='comment'&gt;// Set the main file handled by the source manager to the input file.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN567"&gt;567&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;const&lt;/span&gt; FileEntry *input = file_mgr.getFile(argv[i]);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN568"&gt;568&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;auto&lt;/span&gt; fid = source_mgr.createFileID(input, SourceLocation(), SrcMgr::C_User);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN569"&gt;569&lt;/td&gt;&lt;td class="line"&gt;    source_mgr.setMainFileID(fid);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN570"&gt;570&lt;/td&gt;&lt;td class="line"&gt;    ci.getDiagnosticClient().BeginSourceFile(ci.getLangOpts(), &amp;amp;ci.getPreprocessor());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN571"&gt;571&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN572"&gt;572&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN573"&gt;573&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='comment'&gt;// Parse the file to AST, registering our consumer as the AST consumer.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN574"&gt;574&lt;/td&gt;&lt;td class="line"&gt;    ParseAST(ci.getPreprocessor(), &amp;amp;consumer, ci.getASTContext());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN575"&gt;575&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN576"&gt;576&lt;/td&gt;&lt;td class="line"&gt;    WrapIt(rewriter, fid, &lt;span class='string_literal'&gt;"test"&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN577"&gt;577&lt;/td&gt;&lt;td class="line"&gt;    RawHighlight(rewriter, fid, ci.getPreprocessor());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN578"&gt;578&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN579"&gt;579&lt;/td&gt;&lt;td class="line"&gt;    html::EscapeText(rewriter, fid, &lt;span class='keyword'&gt;false&lt;/span&gt;, &lt;span class='keyword'&gt;true&lt;/span&gt;);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN580"&gt;580&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN581"&gt;581&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='comment'&gt;// Check comments. THIS ONLY CAPTURES doxygen comments.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN582"&gt;582&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;auto&lt;/span&gt;&amp;amp; ast_context = ci.getASTContext();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN583"&gt;583&lt;/td&gt;&lt;td class="line"&gt;&lt;span class='comment'&gt;//    ast_context.getExternalSource()-&amp;gt;ReadComments();&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN584"&gt;584&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;const&lt;/span&gt; &lt;span class='keyword'&gt;auto&lt;/span&gt;&amp;amp; comments = ast_context.getRawCommentList().getComments();&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN585"&gt;585&lt;/td&gt;&lt;td class="line"&gt;    std::cerr &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"DUMPING COMMENTS"&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN586"&gt;586&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;for&lt;/span&gt; (&lt;span class='keyword'&gt;auto&lt;/span&gt;&amp;amp; comment : comments) &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN587"&gt;587&lt;/td&gt;&lt;td class="line"&gt;      std::cerr &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"COMMENT "&lt;/span&gt; &amp;lt;&amp;lt; comment-&amp;gt;getRawText(source_mgr).str() &amp;lt;&amp;lt; std::endl;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN588"&gt;588&lt;/td&gt;&lt;td class="line"&gt;    std::cerr &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"DONE COMMENTS"&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN589"&gt;589&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN590"&gt;590&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;auto&lt;/span&gt; path = MakeSourcePath(fid.getHashValue());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN591"&gt;591&lt;/td&gt;&lt;td class="line"&gt;    std::cerr &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"PATH "&lt;/span&gt; &amp;lt;&amp;lt; path &amp;lt;&amp;lt; std::endl;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN592"&gt;592&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;if&lt;/span&gt; (!MakeDirs(path, 0777)) {&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN593"&gt;593&lt;/td&gt;&lt;td class="line"&gt;      std::cerr &amp;lt;&amp;lt; &lt;span class='string_literal'&gt;"FAILED TO MAKE DIRS"&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN594"&gt;594&lt;/td&gt;&lt;td class="line"&gt;      &lt;span class='keyword'&gt;return&lt;/span&gt; 5;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN595"&gt;595&lt;/td&gt;&lt;td class="line"&gt;    }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN596"&gt;596&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN597"&gt;597&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='comment'&gt;// At this point the rewriter's buffer should be full with the rewritten&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN598"&gt;598&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='comment'&gt;// file contents.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN599"&gt;599&lt;/td&gt;&lt;td class="line"&gt;    &lt;span class='keyword'&gt;const&lt;/span&gt; RewriteBuffer *RewriteBuf = rewriter.getRewriteBufferFor(fid);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN600"&gt;600&lt;/td&gt;&lt;td class="line"&gt;    llvm::outs() &amp;lt;&amp;lt; std::string(RewriteBuf-&amp;gt;begin(), RewriteBuf-&amp;gt;end());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN601"&gt;601&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN602"&gt;602&lt;/td&gt;&lt;td class="line"&gt;    std::ofstream myfile;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN603"&gt;603&lt;/td&gt;&lt;td class="line"&gt;    myfile.open(path);&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN604"&gt;604&lt;/td&gt;&lt;td class="line"&gt;    myfile &amp;lt;&amp;lt; std::string(RewriteBuf-&amp;gt;begin(), RewriteBuf-&amp;gt;end());&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN605"&gt;605&lt;/td&gt;&lt;td class="line"&gt;  }&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN606"&gt;606&lt;/td&gt;&lt;td class="line"&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN607"&gt;607&lt;/td&gt;&lt;td class="line"&gt;  &lt;span class='keyword'&gt;return&lt;/span&gt; 0;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class="num" id="LN608"&gt;608&lt;/td&gt;&lt;td class="line"&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;
