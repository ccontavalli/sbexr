<!doctype html>
<html>
<head>
<title>rewriter.cc</title>
<style type="text/css">
 body { color:#000000; background-color:#ffffff }
 body { font-family:Helvetica, sans-serif; font-size:10pt }
 h1 { font-size:14pt }
 .code { border-collapse:collapse; width:100%; }
 .code { font-family: "Monospace", monospace; font-size:10pt }
 .code { line-height: 1.2em }
 .comment { color: green; font-style: oblique }
 .keyword { color: blue }
 .string_literal { color: red }
 .directive { color: darkmagenta }
 .expansion { display: none; }
 .macro:hover .expansion { display: block; border: 2px solid #FF0000; padding: 2px; background-color:#FFF0F0; font-weight: normal;   -webkit-border-radius:5px;  -webkit-box-shadow:1px 1px 7px #000; position: absolute; top: -1em; left:10em; z-index: 1 } 
 .macro { color: darkmagenta; background-color:LemonChiffon; position: relative }
 .num { width:2.5em; padding-right:2ex; background-color:#eeeeee }
 .num { text-align:right; font-size:8pt }
 .num { color:#444444 }
 .line { padding-left: 1ex; border-left: 3px solid #ccc }
 .line { white-space: pre }
 .msg { -webkit-box-shadow:1px 1px 7px #000 }
 .msg { -webkit-border-radius:5px }
 .msg { font-family:Helvetica, sans-serif; font-size:8pt }
 .msg { float:left }
 .msg { padding:0.25em 1ex 0.25em 1ex }
 .msg { margin-top:10px; margin-bottom:10px }
 .msg { font-weight:bold }
 .msg { max-width:60em; word-wrap: break-word; white-space: pre-wrap }
 .msgT { padding:0x; spacing:0x }
 .msgEvent { background-color:#fff8b4; color:#000000 }
 .msgControl { background-color:#bbbbbb; color:#000000 }
 .mrange { background-color:#dfddf3 }
 .mrange { border-bottom:1px solid #6F9DBE }
 .PathIndex { font-weight: bold; padding:0px 5px; margin-right:5px; }
 .PathIndex { -webkit-border-radius:8px }
 .PathIndexEvent { background-color:#bfba87 }
 .PathIndexControl { background-color:#8c8c8c }
 .PathNav a { text-decoration:none; font-size: larger }
 .CodeInsertionHint { font-weight: bold; background-color: #10dd10 }
 .CodeRemovalHint { background-color:#de1010 }
 .CodeRemovalHint { border-bottom:1px solid #6F9DBE }
 table.simpletable {
   padding: 5px;
   font-size:12pt;
   margin:20px;
   border-collapse: collapse; border-spacing: 0px;
 }
 td.rowname {
   text-align:right; font-weight:bold; color:#444444;
   padding-right:2ex; }
</style>
</head>
<body><table class="code">
<tr><td class="num" id="LN1">1</td><td class="line"><span class='comment'>// Copyright (c) 2013 Carlo Contavalli (ccontavalli@gmail.com).</span></td></tr>
<tr><td class="num" id="LN2">2</td><td class="line"><span class='comment'>// All rights reserved.</span></td></tr>
<tr><td class="num" id="LN3">3</td><td class="line"><span class='comment'>// </span></td></tr>
<tr><td class="num" id="LN4">4</td><td class="line"><span class='comment'>// Redistribution and use in source and binary forms, with or without</span></td></tr>
<tr><td class="num" id="LN5">5</td><td class="line"><span class='comment'>// modification, are permitted provided that the following conditions are met:</span></td></tr>
<tr><td class="num" id="LN6">6</td><td class="line"><span class='comment'>// </span></td></tr>
<tr><td class="num" id="LN7">7</td><td class="line"><span class='comment'>//    1. Redistributions of source code must retain the above copyright notice,</span></td></tr>
<tr><td class="num" id="LN8">8</td><td class="line"><span class='comment'>//    this list of conditions and the following disclaimer.</span></td></tr>
<tr><td class="num" id="LN9">9</td><td class="line"><span class='comment'>// </span></td></tr>
<tr><td class="num" id="LN10">10</td><td class="line"><span class='comment'>//    2. Redistributions in binary form must reproduce the above copyright</span></td></tr>
<tr><td class="num" id="LN11">11</td><td class="line"><span class='comment'>//    notice, this list of conditions and the following disclaimer in the</span></td></tr>
<tr><td class="num" id="LN12">12</td><td class="line"><span class='comment'>//    documentation and/or other materials provided with the distribution.</span></td></tr>
<tr><td class="num" id="LN13">13</td><td class="line"><span class='comment'>// </span></td></tr>
<tr><td class="num" id="LN14">14</td><td class="line"><span class='comment'>// THIS SOFTWARE IS PROVIDED BY Carlo Contavalli ''AS IS'' AND ANY EXPRESS OR</span></td></tr>
<tr><td class="num" id="LN15">15</td><td class="line"><span class='comment'>// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF</span></td></tr>
<tr><td class="num" id="LN16">16</td><td class="line"><span class='comment'>// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO</span></td></tr>
<tr><td class="num" id="LN17">17</td><td class="line"><span class='comment'>// EVENT SHALL Carlo Contavalli OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,</span></td></tr>
<tr><td class="num" id="LN18">18</td><td class="line"><span class='comment'>// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES</span></td></tr>
<tr><td class="num" id="LN19">19</td><td class="line"><span class='comment'>// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</span></td></tr>
<tr><td class="num" id="LN20">20</td><td class="line"><span class='comment'>// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</span></td></tr>
<tr><td class="num" id="LN21">21</td><td class="line"><span class='comment'>// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></td></tr>
<tr><td class="num" id="LN22">22</td><td class="line"><span class='comment'>// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF</span></td></tr>
<tr><td class="num" id="LN23">23</td><td class="line"><span class='comment'>// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></td></tr>
<tr><td class="num" id="LN24">24</td><td class="line"><span class='comment'>// </span></td></tr>
<tr><td class="num" id="LN25">25</td><td class="line"><span class='comment'>// The views and conclusions contained in the software and documentation are</span></td></tr>
<tr><td class="num" id="LN26">26</td><td class="line"><span class='comment'>// those of the authors and should not be interpreted as representing official</span></td></tr>
<tr><td class="num" id="LN27">27</td><td class="line"><span class='comment'>// policies, either expressed or implied, of Carlo Contavalli.</span></td></tr>
<tr><td class="num" id="LN28">28</td><td class="line"> </td></tr>
<tr><td class="num" id="LN29">29</td><td class="line"><span class='comment'>//------------------------------------------------------------------------------</span></td></tr>
<tr><td class="num" id="LN30">30</td><td class="line"><span class='comment'>// Clang rewriter sample. Demonstrates:</span></td></tr>
<tr><td class="num" id="LN31">31</td><td class="line"><span class='comment'>//</span></td></tr>
<tr><td class="num" id="LN32">32</td><td class="line"><span class='comment'>// * How to use RecursiveASTVisitor to find interesting AST nodes.</span></td></tr>
<tr><td class="num" id="LN33">33</td><td class="line"><span class='comment'>// * How to use the Rewriter API to rewrite the source code.</span></td></tr>
<tr><td class="num" id="LN34">34</td><td class="line"><span class='comment'>//</span></td></tr>
<tr><td class="num" id="LN35">35</td><td class="line"><span class='comment'>// Eli Bendersky (eliben@gmail.com)</span></td></tr>
<tr><td class="num" id="LN36">36</td><td class="line"><span class='comment'>// This code is in the public domain</span></td></tr>
<tr><td class="num" id="LN37">37</td><td class="line"><span class='comment'>//------------------------------------------------------------------------------</span></td></tr>
<tr><td class="num" id="LN38">38</td><td class="line"><span class='directive'>#include &lt;iostream&gt;</span></td></tr>
<tr><td class="num" id="LN39">39</td><td class="line"><span class='directive'>#include &lt;cstdio&gt;</span></td></tr>
<tr><td class="num" id="LN40">40</td><td class="line"><span class='directive'>#include &lt;memory&gt;</span></td></tr>
<tr><td class="num" id="LN41">41</td><td class="line"><span class='directive'>#include &lt;string&gt;</span></td></tr>
<tr><td class="num" id="LN42">42</td><td class="line"><span class='directive'>#include &lt;sstream&gt;</span></td></tr>
<tr><td class="num" id="LN43">43</td><td class="line"><span class='directive'>#include &lt;iomanip&gt;</span></td></tr>
<tr><td class="num" id="LN44">44</td><td class="line"> </td></tr>
<tr><td class="num" id="LN45">45</td><td class="line"><span class='directive'>#include &lt;iostream&gt;</span></td></tr>
<tr><td class="num" id="LN46">46</td><td class="line"><span class='directive'>#include &lt;fstream&gt;</span></td></tr>
<tr><td class="num" id="LN47">47</td><td class="line"> </td></tr>
<tr><td class="num" id="LN48">48</td><td class="line"><span class='directive'>#include &lt;sys/stat.h&gt;</span></td></tr>
<tr><td class="num" id="LN49">49</td><td class="line"><span class='directive'>#include &lt;sys/types.h&gt;</span></td></tr>
<tr><td class="num" id="LN50">50</td><td class="line"> </td></tr>
<tr><td class="num" id="LN51">51</td><td class="line"><span class='directive'>#include "clang/AST/ASTConsumer.h"</span></td></tr>
<tr><td class="num" id="LN52">52</td><td class="line"><span class='directive'>#include "clang/AST/RecursiveASTVisitor.h"</span></td></tr>
<tr><td class="num" id="LN53">53</td><td class="line"><span class='directive'>#include "clang/AST/ASTContext.h"</span></td></tr>
<tr><td class="num" id="LN54">54</td><td class="line"><span class='directive'>#include "clang/Basic/Diagnostic.h"</span></td></tr>
<tr><td class="num" id="LN55">55</td><td class="line"><span class='directive'>#include "clang/Basic/FileManager.h"</span></td></tr>
<tr><td class="num" id="LN56">56</td><td class="line"><span class='directive'>#include "clang/Basic/SourceManager.h"</span></td></tr>
<tr><td class="num" id="LN57">57</td><td class="line"><span class='directive'>#include "clang/Basic/TargetOptions.h"</span></td></tr>
<tr><td class="num" id="LN58">58</td><td class="line"><span class='directive'>#include "clang/Basic/TargetInfo.h"</span></td></tr>
<tr><td class="num" id="LN59">59</td><td class="line"><span class='directive'>#include "clang/Frontend/CompilerInstance.h"</span></td></tr>
<tr><td class="num" id="LN60">60</td><td class="line"><span class='directive'>#include "clang/Lex/Preprocessor.h"</span></td></tr>
<tr><td class="num" id="LN61">61</td><td class="line"><span class='directive'>#include "clang/Parse/ParseAST.h"</span></td></tr>
<tr><td class="num" id="LN62">62</td><td class="line"><span class='directive'>#include "clang/Rewrite/Core/Rewriter.h"</span></td></tr>
<tr><td class="num" id="LN63">63</td><td class="line"><span class='directive'>#include "clang/Rewrite/Core/HTMLRewrite.h"</span></td></tr>
<tr><td class="num" id="LN64">64</td><td class="line"><span class='directive'>#include "clang/Rewrite/Frontend/Rewriters.h"</span></td></tr>
<tr><td class="num" id="LN65">65</td><td class="line"><span class='directive'>#include "llvm/Support/Host.h"</span></td></tr>
<tr><td class="num" id="LN66">66</td><td class="line"><span class='directive'>#include "llvm/Support/raw_ostream.h"</span></td></tr>
<tr><td class="num" id="LN67">67</td><td class="line"> </td></tr>
<tr><td class="num" id="LN68">68</td><td class="line"><span class='comment'>// ./clang/lib/Frontend/Rewrite/HTMLPrint.cpp</span></td></tr>
<tr><td class="num" id="LN69">69</td><td class="line"><span class='comment'>// CommentVisitor</span></td></tr>
<tr><td class="num" id="LN70">70</td><td class="line"> </td></tr>
<tr><td class="num" id="LN71">71</td><td class="line"><span class='comment'>// Scoping:</span></td></tr>
<tr><td class="num" id="LN72">72</td><td class="line"><span class='comment'>//   - variable names: links are scoped. Clicking on hte name brings to the definition within the scope.</span></td></tr>
<tr><td class="num" id="LN73">73</td><td class="line"><span class='comment'>//   - function names: static in .cc are per file, non static are global.</span></td></tr>
<tr><td class="num" id="LN74">74</td><td class="line"><span class='comment'>//   - class definitions: in .cc file, they are per file?</span></td></tr>
<tr><td class="num" id="LN75">75</td><td class="line"><span class='comment'>//</span></td></tr>
<tr><td class="num" id="LN76">76</td><td class="line"><span class='comment'>// Two parts of the problem:</span></td></tr>
<tr><td class="num" id="LN77">77</td><td class="line"><span class='comment'>// - identifying position of objects, linking to objects.</span></td></tr>
<tr><td class="num" id="LN78">78</td><td class="line"> </td></tr>
<tr><td class="num" id="LN79">79</td><td class="line"><span class='keyword'>using</span> <span class='keyword'>namespace</span> clang;</td></tr>
<tr><td class="num" id="LN80">80</td><td class="line"> </td></tr>
<tr><td class="num" id="LN81">81</td><td class="line"><span class='keyword'>class</span> Id {</td></tr>
<tr><td class="num" id="LN82">82</td><td class="line"> <span class='keyword'>public</span>:</td></tr>
<tr><td class="num" id="LN83">83</td><td class="line">  Id(std::string start) {</td></tr>
<tr><td class="num" id="LN84">84</td><td class="line">    <span class='keyword'>if</span> (!start.empty()) {</td></tr>
<tr><td class="num" id="LN85">85</td><td class="line">      base_ = start;</td></tr>
<tr><td class="num" id="LN86">86</td><td class="line">      base_.append(<span class='string_literal'>"-"</span>);</td></tr>
<tr><td class="num" id="LN87">87</td><td class="line">    }</td></tr>
<tr><td class="num" id="LN88">88</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN89">89</td><td class="line"> </td></tr>
<tr><td class="num" id="LN90">90</td><td class="line">  std::string Get() {</td></tr>
<tr><td class="num" id="LN91">91</td><td class="line">    <span class='keyword'>return</span> base_ + std::to_string(id_++);</td></tr>
<tr><td class="num" id="LN92">92</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN93">93</td><td class="line"> </td></tr>
<tr><td class="num" id="LN94">94</td><td class="line"> <span class='keyword'>private</span>:</td></tr>
<tr><td class="num" id="LN95">95</td><td class="line">  std::string base_ = <span class='string_literal'>""</span>;</td></tr>
<tr><td class="num" id="LN96">96</td><td class="line">  uint64_t id_ = 0;</td></tr>
<tr><td class="num" id="LN97">97</td><td class="line">};</td></tr>
<tr><td class="num" id="LN98">98</td><td class="line"> </td></tr>
<tr><td class="num" id="LN99">99</td><td class="line"><span class='comment'>// By implementing RecursiveASTVisitor, we can specify which AST nodes</span></td></tr>
<tr><td class="num" id="LN100">100</td><td class="line"><span class='comment'>// we're interested in by overriding relevant methods.</span></td></tr>
<tr><td class="num" id="LN101">101</td><td class="line"><span class='keyword'>class</span> MyASTVisitor : <span class='keyword'>public</span> RecursiveASTVisitor&lt;MyASTVisitor&gt; {</td></tr>
<tr><td class="num" id="LN102">102</td><td class="line"><span class='keyword'>public</span>:</td></tr>
<tr><td class="num" id="LN103">103</td><td class="line">  MyASTVisitor(Rewriter &amp;rewriter, SourceManager&amp; source_manager) : rewriter_(rewriter), source_manager_(source_manager) {}</td></tr>
<tr><td class="num" id="LN104">104</td><td class="line"> </td></tr>
<tr><td class="num" id="LN105">105</td><td class="line">  <span class='keyword'>bool</span> TraverseStmt(Stmt *s) {</td></tr>
<tr><td class="num" id="LN106">106</td><td class="line">    <span class='keyword'>static</span> <span class='keyword'>int</span> depth = 0;</td></tr>
<tr><td class="num" id="LN107">107</td><td class="line">    <span class='keyword'>if</span> (s &amp;&amp; isa&lt;CompoundStmt&gt;(s)) {</td></tr>
<tr><td class="num" id="LN108">108</td><td class="line">      <span class='keyword'>auto</span> *statement = cast&lt;CompoundStmt&gt;(s);</td></tr>
<tr><td class="num" id="LN109">109</td><td class="line"> </td></tr>
<tr><td class="num" id="LN110">110</td><td class="line">      <span class='comment'>// Find location with start of column.</span></td></tr>
<tr><td class="num" id="LN111">111</td><td class="line">      <span class='keyword'>auto</span> start = statement-&gt;getLocStart();</td></tr>
<tr><td class="num" id="LN112">112</td><td class="line">      <span class='keyword'>if</span> (!start.isMacroID()) {</td></tr>
<tr><td class="num" id="LN113">113</td><td class="line">        <span class='keyword'>auto</span> fid = source_manager_.getMainFileID();</td></tr>
<tr><td class="num" id="LN114">114</td><td class="line">        <span class='keyword'>auto</span> line = source_manager_.getExpansionLineNumber(start);</td></tr>
<tr><td class="num" id="LN115">115</td><td class="line">        <span class='keyword'>auto</span> cache = source_manager_.getSLocEntry(fid).getFile().getContentCache();</td></tr>
<tr><td class="num" id="LN116">116</td><td class="line">        <span class='keyword'>auto</span> offset = cache-&gt;SourceLineCache[line - 1];</td></tr>
<tr><td class="num" id="LN117">117</td><td class="line"> </td></tr>
<tr><td class="num" id="LN118">118</td><td class="line">        <span class='keyword'>auto</span>&amp; buffer = rewriter_.getEditBuffer(fid);</td></tr>
<tr><td class="num" id="LN119">119</td><td class="line">        std::string div = <span class='string_literal'>"&lt;div class='compound level-"</span> + std::to_string(depth) + <span class='string_literal'>"'&gt;"</span>;</td></tr>
<tr><td class="num" id="LN120">120</td><td class="line">        buffer.InsertText(offset, div, <span class='keyword'>false</span>);</td></tr>
<tr><td class="num" id="LN121">121</td><td class="line">        <span class='comment'>//auto column = source_manager_.getSpellingColumnNumber(start);</span></td></tr>
<tr><td class="num" id="LN122">122</td><td class="line">        <span class='comment'>// auto cstart2 = source_manager_.translateLineCol(source_manager_.getMainFileID(), line, 0);</span></td></tr>
<tr><td class="num" id="LN123">123</td><td class="line">        <span class='comment'>// auto cstart = statement-&gt;getLocStart();</span></td></tr>
<tr><td class="num" id="LN124">124</td><td class="line"> </td></tr>
<tr><td class="num" id="LN125">125</td><td class="line">        <span class='comment'>// rewriter_.InsertText(statement-&gt;getLocStart(), "/**/");</span></td></tr>
<tr><td class="num" id="LN126">126</td><td class="line">        ++depth;</td></tr>
<tr><td class="num" id="LN127">127</td><td class="line">        <span class='comment'>// std::cerr &lt;&lt; "Entering compound " &lt;&lt; cstart.printToString(source_manager_) &lt;&lt; " or " &lt;&lt; cstart2.printToString(source_manager_) &lt;&lt; std::endl;</span></td></tr>
<tr><td class="num" id="LN128">128</td><td class="line">        <span class='keyword'>auto</span> result = RecursiveASTVisitor&lt;MyASTVisitor&gt;::TraverseStmt(s);</td></tr>
<tr><td class="num" id="LN129">129</td><td class="line">        --depth;</td></tr>
<tr><td class="num" id="LN130">130</td><td class="line">        rewriter_.InsertTextAfterToken(statement-&gt;getLocEnd(), <span class='string_literal'>"&lt;/div&gt;"</span>);</td></tr>
<tr><td class="num" id="LN131">131</td><td class="line">        <span class='comment'>//std::cerr &lt;&lt; "Exiting compound " &lt;&lt; statement-&gt;getLocEnd().printToString(source_manager_) &lt;&lt; std::endl;</span></td></tr>
<tr><td class="num" id="LN132">132</td><td class="line">        <span class='keyword'>return</span> result;</td></tr>
<tr><td class="num" id="LN133">133</td><td class="line">      }</td></tr>
<tr><td class="num" id="LN134">134</td><td class="line">    }</td></tr>
<tr><td class="num" id="LN135">135</td><td class="line"> </td></tr>
<tr><td class="num" id="LN136">136</td><td class="line">    <span class='keyword'>return</span> RecursiveASTVisitor&lt;MyASTVisitor&gt;::TraverseStmt(s);</td></tr>
<tr><td class="num" id="LN137">137</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN138">138</td><td class="line"> </td></tr>
<tr><td class="num" id="LN139">139</td><td class="line">  <span class='keyword'>bool</span> VisitStmt(Stmt *s) {</td></tr>
<tr><td class="num" id="LN140">140</td><td class="line"><span class='comment'>//    std::cerr &lt;&lt; "Visiting statement " &lt;&lt; std::endl;</span></td></tr>
<tr><td class="num" id="LN141">141</td><td class="line"> </td></tr>
<tr><td class="num" id="LN142">142</td><td class="line"><span class='directive'>#if 0</span></td></tr>
<tr><td class="num" id="LN143">143</td><td class="line">    <span class='comment'>// Only care about If statements.</span></td></tr>
<tr><td class="num" id="LN144">144</td><td class="line">    <span class='keyword'>if</span> (isa&lt;IfStmt&gt;(s)) {</td></tr>
<tr><td class="num" id="LN145">145</td><td class="line">      IfStmt *IfStatement = cast&lt;IfStmt&gt;(s);</td></tr>
<tr><td class="num" id="LN146">146</td><td class="line">      Stmt *Then = IfStatement-&gt;getThen();</td></tr>
<tr><td class="num" id="LN147">147</td><td class="line"> </td></tr>
<tr><td class="num" id="LN148">148</td><td class="line">      rewriter_.InsertText(Then-&gt;getLocStart(), <span class='string_literal'>"// the 'if' part\n"</span>, <span class='keyword'>true</span>,</td></tr>
<tr><td class="num" id="LN149">149</td><td class="line">                             <span class='keyword'>true</span>);</td></tr>
<tr><td class="num" id="LN150">150</td><td class="line"> </td></tr>
<tr><td class="num" id="LN151">151</td><td class="line">      Stmt *Else = IfStatement-&gt;getElse();</td></tr>
<tr><td class="num" id="LN152">152</td><td class="line">      <span class='keyword'>if</span> (Else)</td></tr>
<tr><td class="num" id="LN153">153</td><td class="line">        rewriter_.InsertText(Else-&gt;getLocStart(), <span class='string_literal'>"// the 'else' part\n"</span>,</td></tr>
<tr><td class="num" id="LN154">154</td><td class="line">                               <span class='keyword'>true</span>, <span class='keyword'>true</span>);</td></tr>
<tr><td class="num" id="LN155">155</td><td class="line">    }</td></tr>
<tr><td class="num" id="LN156">156</td><td class="line"><span class='directive'>#endif</span></td></tr>
<tr><td class="num" id="LN157">157</td><td class="line"> </td></tr>
<tr><td class="num" id="LN158">158</td><td class="line">    <span class='keyword'>return</span> <span class='keyword'>true</span>;</td></tr>
<tr><td class="num" id="LN159">159</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN160">160</td><td class="line"> </td></tr>
<tr><td class="num" id="LN161">161</td><td class="line">  <span class='keyword'>bool</span> VisitBlockDecl(BlockDecl *d) {</td></tr>
<tr><td class="num" id="LN162">162</td><td class="line">    std::cerr &lt;&lt; <span class='string_literal'>"Visiting block "</span> &lt;&lt; std::endl;</td></tr>
<tr><td class="num" id="LN163">163</td><td class="line">    <span class='keyword'>return</span> <span class='keyword'>true</span>;</td></tr>
<tr><td class="num" id="LN164">164</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN165">165</td><td class="line"> </td></tr>
<tr><td class="num" id="LN166">166</td><td class="line">  <span class='keyword'>bool</span> VisitFunctionDecl(FunctionDecl *f) {</td></tr>
<tr><td class="num" id="LN167">167</td><td class="line">    std::cerr &lt;&lt; <span class='string_literal'>"Visiting function "</span> &lt;&lt; std::endl;</td></tr>
<tr><td class="num" id="LN168">168</td><td class="line"> </td></tr>
<tr><td class="num" id="LN169">169</td><td class="line">    <span class='comment'>// Only function definitions (with bodies), not declarations.</span></td></tr>
<tr><td class="num" id="LN170">170</td><td class="line">    <span class='keyword'>if</span> (f-&gt;hasBody()) {</td></tr>
<tr><td class="num" id="LN171">171</td><td class="line"> </td></tr>
<tr><td class="num" id="LN172">172</td><td class="line">      <span class='comment'>// Type name as string</span></td></tr>
<tr><td class="num" id="LN173">173</td><td class="line">      QualType QT = f-&gt;getReturnType();</td></tr>
<tr><td class="num" id="LN174">174</td><td class="line">      std::string TypeStr = QT.getAsString();</td></tr>
<tr><td class="num" id="LN175">175</td><td class="line"> </td></tr>
<tr><td class="num" id="LN176">176</td><td class="line">      <span class='comment'>// Function name</span></td></tr>
<tr><td class="num" id="LN177">177</td><td class="line">      DeclarationName DeclName = f-&gt;getNameInfo().getName();</td></tr>
<tr><td class="num" id="LN178">178</td><td class="line">      std::string FuncName = DeclName.getAsString();</td></tr>
<tr><td class="num" id="LN179">179</td><td class="line"> </td></tr>
<tr><td class="num" id="LN180">180</td><td class="line">      <span class='comment'>// Add comment before</span></td></tr>
<tr><td class="num" id="LN181">181</td><td class="line"><span class='directive'>#if 0</span></td></tr>
<tr><td class="num" id="LN182">182</td><td class="line">      std::stringstream SSBefore;</td></tr>
<tr><td class="num" id="LN183">183</td><td class="line">      SSBefore &lt;&lt; <span class='string_literal'>"// Begin function "</span> &lt;&lt; FuncName &lt;&lt; <span class='string_literal'>" returning "</span> &lt;&lt; TypeStr</td></tr>
<tr><td class="num" id="LN184">184</td><td class="line">               &lt;&lt; <span class='string_literal'>"\n"</span>;</td></tr>
<tr><td class="num" id="LN185">185</td><td class="line">      SourceLocation source_location = f-&gt;getSourceRange().getBegin();</td></tr>
<tr><td class="num" id="LN186">186</td><td class="line">      rewriter_.InsertText(source_location, SSBefore.str(), <span class='keyword'>true</span>, <span class='keyword'>true</span>);</td></tr>
<tr><td class="num" id="LN187">187</td><td class="line"><span class='directive'>#endif</span></td></tr>
<tr><td class="num" id="LN188">188</td><td class="line"> </td></tr>
<tr><td class="num" id="LN189">189</td><td class="line"><span class='directive'>#if 0</span></td></tr>
<tr><td class="num" id="LN190">190</td><td class="line">      Stmt *FuncBody = f-&gt;getBody();</td></tr>
<tr><td class="num" id="LN191">191</td><td class="line">      <span class='comment'>// And after</span></td></tr>
<tr><td class="num" id="LN192">192</td><td class="line">      std::stringstream SSAfter;</td></tr>
<tr><td class="num" id="LN193">193</td><td class="line">      SSAfter &lt;&lt; <span class='string_literal'>"\n// End function "</span> &lt;&lt; FuncName;</td></tr>
<tr><td class="num" id="LN194">194</td><td class="line">      <span class='keyword'>auto</span> source_location = FuncBody-&gt;getLocEnd().getLocWithOffset(1);</td></tr>
<tr><td class="num" id="LN195">195</td><td class="line">      rewriter_.InsertText(source_location, SSAfter.str(), <span class='keyword'>true</span>, <span class='keyword'>true</span>);</td></tr>
<tr><td class="num" id="LN196">196</td><td class="line"><span class='directive'>#endif</span></td></tr>
<tr><td class="num" id="LN197">197</td><td class="line"> </td></tr>
<tr><td class="num" id="LN198">198</td><td class="line">      <span class='keyword'>auto</span> source_location = f-&gt;getReturnTypeSourceRange().getEnd();</td></tr>
<tr><td class="num" id="LN199">199</td><td class="line">      rewriter_.InsertTextAfterToken(source_location, <span class='string_literal'>"&lt;/span&gt;"</span>);</td></tr>
<tr><td class="num" id="LN200">200</td><td class="line">      source_location = f-&gt;getReturnTypeSourceRange().getBegin();</td></tr>
<tr><td class="num" id="LN201">201</td><td class="line">      rewriter_.InsertTextBefore(source_location, <span class='string_literal'>"&lt;span class='type'&gt;"</span>);</td></tr>
<tr><td class="num" id="LN202">202</td><td class="line">    }</td></tr>
<tr><td class="num" id="LN203">203</td><td class="line"> </td></tr>
<tr><td class="num" id="LN204">204</td><td class="line">    <span class='keyword'>return</span> <span class='keyword'>true</span>;</td></tr>
<tr><td class="num" id="LN205">205</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN206">206</td><td class="line"> </td></tr>
<tr><td class="num" id="LN207">207</td><td class="line"><span class='keyword'>private</span>:</td></tr>
<tr><td class="num" id="LN208">208</td><td class="line">  <span class='comment'>//Id id_;</span></td></tr>
<tr><td class="num" id="LN209">209</td><td class="line">  Rewriter &amp;rewriter_;</td></tr>
<tr><td class="num" id="LN210">210</td><td class="line">  SourceManager &amp;source_manager_;</td></tr>
<tr><td class="num" id="LN211">211</td><td class="line">};</td></tr>
<tr><td class="num" id="LN212">212</td><td class="line"> </td></tr>
<tr><td class="num" id="LN213">213</td><td class="line"><span class='comment'>// Implementation of the ASTConsumer interface for reading an AST produced</span></td></tr>
<tr><td class="num" id="LN214">214</td><td class="line"><span class='comment'>// by the Clang parser.</span></td></tr>
<tr><td class="num" id="LN215">215</td><td class="line"><span class='keyword'>class</span> MyASTConsumer : <span class='keyword'>public</span> ASTConsumer {</td></tr>
<tr><td class="num" id="LN216">216</td><td class="line"><span class='keyword'>public</span>:</td></tr>
<tr><td class="num" id="LN217">217</td><td class="line">  MyASTConsumer(Rewriter &amp;rewriter, SourceManager &amp;source_manager) : visitor_(rewriter, source_manager) {}</td></tr>
<tr><td class="num" id="LN218">218</td><td class="line"> </td></tr>
<tr><td class="num" id="LN219">219</td><td class="line">  <span class='comment'>// Override the method that gets called for each parsed top-level</span></td></tr>
<tr><td class="num" id="LN220">220</td><td class="line">  <span class='comment'>// declaration.</span></td></tr>
<tr><td class="num" id="LN221">221</td><td class="line">  <span class='keyword'>virtual</span> <span class='keyword'>bool</span> HandleTopLevelDecl(DeclGroupRef DR) {</td></tr>
<tr><td class="num" id="LN222">222</td><td class="line">    <span class='keyword'>for</span> (DeclGroupRef::iterator b = DR.begin(), e = DR.end(); b != e; ++b)</td></tr>
<tr><td class="num" id="LN223">223</td><td class="line">      <span class='comment'>// Traverse the declaration using our AST visitor.</span></td></tr>
<tr><td class="num" id="LN224">224</td><td class="line">      visitor_.TraverseDecl(*b);</td></tr>
<tr><td class="num" id="LN225">225</td><td class="line">    <span class='keyword'>return</span> <span class='keyword'>true</span>;</td></tr>
<tr><td class="num" id="LN226">226</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN227">227</td><td class="line"> </td></tr>
<tr><td class="num" id="LN228">228</td><td class="line"><span class='keyword'>private</span>:</td></tr>
<tr><td class="num" id="LN229">229</td><td class="line">  MyASTVisitor visitor_;</td></tr>
<tr><td class="num" id="LN230">230</td><td class="line">};</td></tr>
<tr><td class="num" id="LN231">231</td><td class="line"> </td></tr>
<tr><td class="num" id="LN232">232</td><td class="line"> </td></tr>
<tr><td class="num" id="LN233">233</td><td class="line"><span class='keyword'>void</span> HighlightRange(RewriteBuffer &amp;RB, <span class='keyword'>unsigned</span> B, <span class='keyword'>unsigned</span> E,</td></tr>
<tr><td class="num" id="LN234">234</td><td class="line">                          <span class='keyword'>const</span> <span class='keyword'>char</span> *BufferStart,</td></tr>
<tr><td class="num" id="LN235">235</td><td class="line">                          <span class='keyword'>const</span> <span class='keyword'>char</span> *StartTag, <span class='keyword'>const</span> <span class='keyword'>char</span> *EndTag) {</td></tr>
<tr><td class="num" id="LN236">236</td><td class="line">  <span class='comment'>// Insert the tag at the absolute start/end of the range.</span></td></tr>
<tr><td class="num" id="LN237">237</td><td class="line">  RB.InsertTextAfter(B, StartTag);</td></tr>
<tr><td class="num" id="LN238">238</td><td class="line">  RB.InsertTextBefore(E, EndTag);</td></tr>
<tr><td class="num" id="LN239">239</td><td class="line"> </td></tr>
<tr><td class="num" id="LN240">240</td><td class="line">  <span class='comment'>// Scan the range to see if there is a \r or \n.  If so, and if the line is</span></td></tr>
<tr><td class="num" id="LN241">241</td><td class="line">  <span class='comment'>// not blank, insert tags on that line as well.</span></td></tr>
<tr><td class="num" id="LN242">242</td><td class="line">  <span class='keyword'>bool</span> HadOpenTag = <span class='keyword'>true</span>;</td></tr>
<tr><td class="num" id="LN243">243</td><td class="line"> </td></tr>
<tr><td class="num" id="LN244">244</td><td class="line">  <span class='keyword'>unsigned</span> LastNonWhiteSpace = B;</td></tr>
<tr><td class="num" id="LN245">245</td><td class="line">  <span class='keyword'>for</span> (<span class='keyword'>unsigned</span> i = B; i != E; ++i) {</td></tr>
<tr><td class="num" id="LN246">246</td><td class="line">    <span class='keyword'>switch</span> (BufferStart[i]) {</td></tr>
<tr><td class="num" id="LN247">247</td><td class="line">    <span class='keyword'>case</span> '\r':</td></tr>
<tr><td class="num" id="LN248">248</td><td class="line">    <span class='keyword'>case</span> '\n':</td></tr>
<tr><td class="num" id="LN249">249</td><td class="line">      <span class='comment'>// Okay, we found a newline in the range.  If we have an open tag, we need</span></td></tr>
<tr><td class="num" id="LN250">250</td><td class="line">      <span class='comment'>// to insert a close tag at the first non-whitespace before the newline.</span></td></tr>
<tr><td class="num" id="LN251">251</td><td class="line">      <span class='keyword'>if</span> (HadOpenTag)</td></tr>
<tr><td class="num" id="LN252">252</td><td class="line">        RB.InsertTextBefore(LastNonWhiteSpace+1, EndTag);</td></tr>
<tr><td class="num" id="LN253">253</td><td class="line"> </td></tr>
<tr><td class="num" id="LN254">254</td><td class="line">      <span class='comment'>// Instead of inserting an open tag immediately after the newline, we</span></td></tr>
<tr><td class="num" id="LN255">255</td><td class="line">      <span class='comment'>// wait until we see a non-whitespace character.  This prevents us from</span></td></tr>
<tr><td class="num" id="LN256">256</td><td class="line">      <span class='comment'>// inserting tags around blank lines, and also allows the open tag to</span></td></tr>
<tr><td class="num" id="LN257">257</td><td class="line">      <span class='comment'>// be put *after* whitespace on a non-blank line.</span></td></tr>
<tr><td class="num" id="LN258">258</td><td class="line">      HadOpenTag = <span class='keyword'>false</span>;</td></tr>
<tr><td class="num" id="LN259">259</td><td class="line">      <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN260">260</td><td class="line">    <span class='keyword'>case</span> '\0':</td></tr>
<tr><td class="num" id="LN261">261</td><td class="line">    <span class='keyword'>case</span> ' ':</td></tr>
<tr><td class="num" id="LN262">262</td><td class="line">    <span class='keyword'>case</span> '\t':</td></tr>
<tr><td class="num" id="LN263">263</td><td class="line">    <span class='keyword'>case</span> '\f':</td></tr>
<tr><td class="num" id="LN264">264</td><td class="line">    <span class='keyword'>case</span> '\v':</td></tr>
<tr><td class="num" id="LN265">265</td><td class="line">      <span class='comment'>// Ignore whitespace.</span></td></tr>
<tr><td class="num" id="LN266">266</td><td class="line">      <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN267">267</td><td class="line"> </td></tr>
<tr><td class="num" id="LN268">268</td><td class="line">    <span class='keyword'>default</span>:</td></tr>
<tr><td class="num" id="LN269">269</td><td class="line">      <span class='comment'>// If there is no tag open, do it now.</span></td></tr>
<tr><td class="num" id="LN270">270</td><td class="line">      <span class='keyword'>if</span> (!HadOpenTag) {</td></tr>
<tr><td class="num" id="LN271">271</td><td class="line">        RB.InsertTextAfter(i, StartTag);</td></tr>
<tr><td class="num" id="LN272">272</td><td class="line">        HadOpenTag = <span class='keyword'>true</span>;</td></tr>
<tr><td class="num" id="LN273">273</td><td class="line">      }</td></tr>
<tr><td class="num" id="LN274">274</td><td class="line"> </td></tr>
<tr><td class="num" id="LN275">275</td><td class="line">      <span class='comment'>// Remember this character.</span></td></tr>
<tr><td class="num" id="LN276">276</td><td class="line">      LastNonWhiteSpace = i;</td></tr>
<tr><td class="num" id="LN277">277</td><td class="line">      <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN278">278</td><td class="line">    }</td></tr>
<tr><td class="num" id="LN279">279</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN280">280</td><td class="line">}</td></tr>
<tr><td class="num" id="LN281">281</td><td class="line"><span class='keyword'>void</span> HighlightRange(Rewriter &amp;R, SourceLocation B, SourceLocation E,</td></tr>
<tr><td class="num" id="LN282">282</td><td class="line">                          <span class='keyword'>const</span> <span class='keyword'>char</span> *StartTag, <span class='keyword'>const</span> <span class='keyword'>char</span> *EndTag) {</td></tr>
<tr><td class="num" id="LN283">283</td><td class="line">  SourceManager &amp;SM = R.getSourceMgr();</td></tr>
<tr><td class="num" id="LN284">284</td><td class="line">  B = SM.getExpansionLoc(B);</td></tr>
<tr><td class="num" id="LN285">285</td><td class="line">  E = SM.getExpansionLoc(E);</td></tr>
<tr><td class="num" id="LN286">286</td><td class="line">  FileID FID = SM.getFileID(B);</td></tr>
<tr><td class="num" id="LN287">287</td><td class="line">  <span class='macro'>assert(SM.getFileID(E) == FID &amp;&amp; <span class='string_literal'>"B/E not in the same file!"</span>)<span class='expansion'>(static_cast&lt;void&gt; (0))</span></span>;</td></tr>
<tr><td class="num" id="LN288">288</td><td class="line"> </td></tr>
<tr><td class="num" id="LN289">289</td><td class="line">  <span class='keyword'>unsigned</span> BOffset = SM.getFileOffset(B);</td></tr>
<tr><td class="num" id="LN290">290</td><td class="line">  <span class='keyword'>unsigned</span> EOffset = SM.getFileOffset(E);</td></tr>
<tr><td class="num" id="LN291">291</td><td class="line"> </td></tr>
<tr><td class="num" id="LN292">292</td><td class="line">  <span class='comment'>// Include the whole end token in the range.</span></td></tr>
<tr><td class="num" id="LN293">293</td><td class="line">  EOffset += Lexer::MeasureTokenLength(E, R.getSourceMgr(), R.getLangOpts());</td></tr>
<tr><td class="num" id="LN294">294</td><td class="line"> </td></tr>
<tr><td class="num" id="LN295">295</td><td class="line">  <span class='keyword'>bool</span> Invalid = <span class='keyword'>false</span>;</td></tr>
<tr><td class="num" id="LN296">296</td><td class="line">  <span class='keyword'>const</span> <span class='keyword'>char</span> *BufferStart = SM.getBufferData(FID, &amp;Invalid).data();</td></tr>
<tr><td class="num" id="LN297">297</td><td class="line">  <span class='keyword'>if</span> (Invalid)</td></tr>
<tr><td class="num" id="LN298">298</td><td class="line">    <span class='keyword'>return</span>;</td></tr>
<tr><td class="num" id="LN299">299</td><td class="line">  </td></tr>
<tr><td class="num" id="LN300">300</td><td class="line">  HighlightRange(R.getEditBuffer(FID), BOffset, EOffset,</td></tr>
<tr><td class="num" id="LN301">301</td><td class="line">                 BufferStart, StartTag, EndTag);</td></tr>
<tr><td class="num" id="LN302">302</td><td class="line">}</td></tr>
<tr><td class="num" id="LN303">303</td><td class="line"><span class='keyword'>void</span> RawHighlight(Rewriter &amp;R, FileID FID, <span class='keyword'>const</span> Preprocessor &amp;PP) {</td></tr>
<tr><td class="num" id="LN304">304</td><td class="line">  RewriteBuffer &amp;RB = R.getEditBuffer(FID);</td></tr>
<tr><td class="num" id="LN305">305</td><td class="line"> </td></tr>
<tr><td class="num" id="LN306">306</td><td class="line">  <span class='keyword'>const</span> SourceManager &amp;SM = PP.getSourceManager();</td></tr>
<tr><td class="num" id="LN307">307</td><td class="line">  <span class='keyword'>const</span> llvm::MemoryBuffer *FromFile = SM.getBuffer(FID);</td></tr>
<tr><td class="num" id="LN308">308</td><td class="line">  Lexer L(FID, FromFile, SM, PP.getLangOpts());</td></tr>
<tr><td class="num" id="LN309">309</td><td class="line">  <span class='keyword'>const</span> <span class='keyword'>char</span> *BufferStart = L.getBuffer().data();</td></tr>
<tr><td class="num" id="LN310">310</td><td class="line"> </td></tr>
<tr><td class="num" id="LN311">311</td><td class="line">  <span class='comment'>// Inform the preprocessor that we want to retain comments as tokens, so we</span></td></tr>
<tr><td class="num" id="LN312">312</td><td class="line">  <span class='comment'>// can highlight them.</span></td></tr>
<tr><td class="num" id="LN313">313</td><td class="line">  L.SetCommentRetentionState(<span class='keyword'>true</span>);</td></tr>
<tr><td class="num" id="LN314">314</td><td class="line"> </td></tr>
<tr><td class="num" id="LN315">315</td><td class="line">  <span class='comment'>// Lex all the tokens in raw mode, to avoid entering #includes or expanding</span></td></tr>
<tr><td class="num" id="LN316">316</td><td class="line">  <span class='comment'>// macros.</span></td></tr>
<tr><td class="num" id="LN317">317</td><td class="line">  Token Tok;</td></tr>
<tr><td class="num" id="LN318">318</td><td class="line">  L.LexFromRawLexer(Tok);</td></tr>
<tr><td class="num" id="LN319">319</td><td class="line"> </td></tr>
<tr><td class="num" id="LN320">320</td><td class="line">  <span class='keyword'>while</span> (Tok.isNot(tok::eof)) {</td></tr>
<tr><td class="num" id="LN321">321</td><td class="line">    <span class='keyword'>unsigned</span> TokOffs = SM.getFileOffset(Tok.getLocation());</td></tr>
<tr><td class="num" id="LN322">322</td><td class="line">    <span class='keyword'>unsigned</span> TokLen = Tok.getLength();</td></tr>
<tr><td class="num" id="LN323">323</td><td class="line">    <span class='keyword'>switch</span> (Tok.getKind()) {</td></tr>
<tr><td class="num" id="LN324">324</td><td class="line">    <span class='keyword'>default</span>: <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN325">325</td><td class="line">    <span class='keyword'>case</span> tok::comment:</td></tr>
<tr><td class="num" id="LN326">326</td><td class="line">      HighlightRange(RB, TokOffs, TokOffs+TokLen, BufferStart,</td></tr>
<tr><td class="num" id="LN327">327</td><td class="line">                     <span class='string_literal'>"&lt;span class='comment'&gt;"</span>, <span class='string_literal'>"&lt;/span&gt;"</span>);</td></tr>
<tr><td class="num" id="LN328">328</td><td class="line">      <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN329">329</td><td class="line">    <span class='keyword'>case</span> tok::utf8_string_literal:</td></tr>
<tr><td class="num" id="LN330">330</td><td class="line">      <span class='comment'>// Chop off the u part of u8 prefix</span></td></tr>
<tr><td class="num" id="LN331">331</td><td class="line">      ++TokOffs;</td></tr>
<tr><td class="num" id="LN332">332</td><td class="line">      --TokLen;</td></tr>
<tr><td class="num" id="LN333">333</td><td class="line">      <span class='comment'>// FALL THROUGH to chop the 8</span></td></tr>
<tr><td class="num" id="LN334">334</td><td class="line">    <span class='keyword'>case</span> tok::wide_string_literal:</td></tr>
<tr><td class="num" id="LN335">335</td><td class="line">    <span class='keyword'>case</span> tok::utf16_string_literal:</td></tr>
<tr><td class="num" id="LN336">336</td><td class="line">    <span class='keyword'>case</span> tok::utf32_string_literal:</td></tr>
<tr><td class="num" id="LN337">337</td><td class="line">      <span class='comment'>// Chop off the L, u, U or 8 prefix</span></td></tr>
<tr><td class="num" id="LN338">338</td><td class="line">      ++TokOffs;</td></tr>
<tr><td class="num" id="LN339">339</td><td class="line">      --TokLen;</td></tr>
<tr><td class="num" id="LN340">340</td><td class="line">      <span class='comment'>// FALL THROUGH.</span></td></tr>
<tr><td class="num" id="LN341">341</td><td class="line">    <span class='keyword'>case</span> tok::string_literal:</td></tr>
<tr><td class="num" id="LN342">342</td><td class="line">      <span class='comment'>// FIXME: Exclude the optional ud-suffix from the highlighted range.</span></td></tr>
<tr><td class="num" id="LN343">343</td><td class="line">      HighlightRange(RB, TokOffs, TokOffs+TokLen, BufferStart,</td></tr>
<tr><td class="num" id="LN344">344</td><td class="line">                     <span class='string_literal'>"&lt;span class='string'&gt;"</span>, <span class='string_literal'>"&lt;/span&gt;"</span>);</td></tr>
<tr><td class="num" id="LN345">345</td><td class="line">      <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN346">346</td><td class="line">    <span class='keyword'>case</span> tok::numeric_constant:</td></tr>
<tr><td class="num" id="LN347">347</td><td class="line">      HighlightRange(RB, TokOffs, TokOffs+TokLen, BufferStart,</td></tr>
<tr><td class="num" id="LN348">348</td><td class="line">                     <span class='string_literal'>"&lt;span class='numeric'&gt;"</span>, <span class='string_literal'>"&lt;/span&gt;"</span>);</td></tr>
<tr><td class="num" id="LN349">349</td><td class="line">      <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN350">350</td><td class="line">    <span class='keyword'>case</span> tok::utf8_char_constant:</td></tr>
<tr><td class="num" id="LN351">351</td><td class="line">      ++TokOffs;</td></tr>
<tr><td class="num" id="LN352">352</td><td class="line">      --TokLen;</td></tr>
<tr><td class="num" id="LN353">353</td><td class="line">    <span class='keyword'>case</span> tok::wide_char_constant:</td></tr>
<tr><td class="num" id="LN354">354</td><td class="line">    <span class='keyword'>case</span> tok::utf16_char_constant:</td></tr>
<tr><td class="num" id="LN355">355</td><td class="line">    <span class='keyword'>case</span> tok::utf32_char_constant:</td></tr>
<tr><td class="num" id="LN356">356</td><td class="line">      <span class='comment'>// Chop off the L, u, U or 8 prefix</span></td></tr>
<tr><td class="num" id="LN357">357</td><td class="line">      ++TokOffs;</td></tr>
<tr><td class="num" id="LN358">358</td><td class="line">      --TokLen;</td></tr>
<tr><td class="num" id="LN359">359</td><td class="line">    <span class='keyword'>case</span> tok::char_constant:</td></tr>
<tr><td class="num" id="LN360">360</td><td class="line">      HighlightRange(RB, TokOffs, TokOffs+TokLen, BufferStart,</td></tr>
<tr><td class="num" id="LN361">361</td><td class="line">                     <span class='string_literal'>"&lt;span class='char'&gt;"</span>, <span class='string_literal'>"&lt;/span&gt;"</span>);</td></tr>
<tr><td class="num" id="LN362">362</td><td class="line">      <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN363">363</td><td class="line">    <span class='keyword'>case</span> tok::hash: {</td></tr>
<tr><td class="num" id="LN364">364</td><td class="line">      <span class='comment'>// If this is a preprocessor directive, all tokens to end of line are too.</span></td></tr>
<tr><td class="num" id="LN365">365</td><td class="line">      <span class='keyword'>if</span> (!Tok.isAtStartOfLine())</td></tr>
<tr><td class="num" id="LN366">366</td><td class="line">        <span class='keyword'>break</span>;</td></tr>
<tr><td class="num" id="LN367">367</td><td class="line"> </td></tr>
<tr><td class="num" id="LN368">368</td><td class="line">      <span class='comment'>// Eat all of the tokens until we get to the next one at the start of</span></td></tr>
<tr><td class="num" id="LN369">369</td><td class="line">      <span class='comment'>// line.</span></td></tr>
<tr><td class="num" id="LN370">370</td><td class="line">      <span class='keyword'>unsigned</span> TokEnd = TokOffs+TokLen;</td></tr>
<tr><td class="num" id="LN371">371</td><td class="line">      L.LexFromRawLexer(Tok);</td></tr>
<tr><td class="num" id="LN372">372</td><td class="line">      <span class='keyword'>while</span> (!Tok.isAtStartOfLine() &amp;&amp; Tok.isNot(tok::eof)) {</td></tr>
<tr><td class="num" id="LN373">373</td><td class="line">        TokEnd = SM.getFileOffset(Tok.getLocation())+Tok.getLength();</td></tr>
<tr><td class="num" id="LN374">374</td><td class="line">        L.LexFromRawLexer(Tok);</td></tr>
<tr><td class="num" id="LN375">375</td><td class="line">      }</td></tr>
<tr><td class="num" id="LN376">376</td><td class="line"> </td></tr>
<tr><td class="num" id="LN377">377</td><td class="line">      <span class='comment'>// Find end of line.  This is a hack.</span></td></tr>
<tr><td class="num" id="LN378">378</td><td class="line">      HighlightRange(RB, TokOffs, TokEnd, BufferStart,</td></tr>
<tr><td class="num" id="LN379">379</td><td class="line">                     <span class='string_literal'>"&lt;span class='directive'&gt;"</span>, <span class='string_literal'>"&lt;/span&gt;"</span>);</td></tr>
<tr><td class="num" id="LN380">380</td><td class="line"> </td></tr>
<tr><td class="num" id="LN381">381</td><td class="line">      <span class='comment'>// Don't skip the next token.</span></td></tr>
<tr><td class="num" id="LN382">382</td><td class="line">      <span class='keyword'>continue</span>;</td></tr>
<tr><td class="num" id="LN383">383</td><td class="line">    }</td></tr>
<tr><td class="num" id="LN384">384</td><td class="line">    }</td></tr>
<tr><td class="num" id="LN385">385</td><td class="line"> </td></tr>
<tr><td class="num" id="LN386">386</td><td class="line">    L.LexFromRawLexer(Tok);</td></tr>
<tr><td class="num" id="LN387">387</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN388">388</td><td class="line">}</td></tr>
<tr><td class="num" id="LN389">389</td><td class="line"> </td></tr>
<tr><td class="num" id="LN390">390</td><td class="line"> </td></tr>
<tr><td class="num" id="LN391">391</td><td class="line"> </td></tr>
<tr><td class="num" id="LN392">392</td><td class="line"><span class='keyword'>void</span> WrapIt(Rewriter&amp; R, FileID FID, <span class='keyword'>const</span> <span class='keyword'>char</span> *title) {</td></tr>
<tr><td class="num" id="LN393">393</td><td class="line"> </td></tr>
<tr><td class="num" id="LN394">394</td><td class="line">  <span class='keyword'>const</span> llvm::MemoryBuffer *Buf = R.getSourceMgr().getBuffer(FID);</td></tr>
<tr><td class="num" id="LN395">395</td><td class="line">  <span class='keyword'>const</span> <span class='keyword'>char</span>* FileStart = Buf-&gt;getBufferStart();</td></tr>
<tr><td class="num" id="LN396">396</td><td class="line">  <span class='keyword'>const</span> <span class='keyword'>char</span>* FileEnd = Buf-&gt;getBufferEnd();</td></tr>
<tr><td class="num" id="LN397">397</td><td class="line"> </td></tr>
<tr><td class="num" id="LN398">398</td><td class="line">  SourceLocation StartLoc = R.getSourceMgr().getLocForStartOfFile(FID);</td></tr>
<tr><td class="num" id="LN399">399</td><td class="line">  SourceLocation EndLoc = StartLoc.getLocWithOffset(FileEnd-FileStart);</td></tr>
<tr><td class="num" id="LN400">400</td><td class="line"> </td></tr>
<tr><td class="num" id="LN401">401</td><td class="line">  std::string s;</td></tr>
<tr><td class="num" id="LN402">402</td><td class="line">  llvm::raw_string_ostream os(s);</td></tr>
<tr><td class="num" id="LN403">403</td><td class="line">  os &lt;&lt; <span class='string_literal'>"&lt;!doctype html&gt;\n"</span> <span class='comment'>// Use HTML 5 doctype</span></td></tr>
<tr><td class="num" id="LN404">404</td><td class="line">        <span class='string_literal'>"&lt;html&gt;\n&lt;head&gt;\n"</span>;</td></tr>
<tr><td class="num" id="LN405">405</td><td class="line"> </td></tr>
<tr><td class="num" id="LN406">406</td><td class="line">  <span class='keyword'>if</span> (title)</td></tr>
<tr><td class="num" id="LN407">407</td><td class="line">    os &lt;&lt; <span class='string_literal'>"&lt;title&gt;"</span> &lt;&lt; html::EscapeText(title) &lt;&lt; <span class='string_literal'>"&lt;/title&gt;\n"</span>;</td></tr>
<tr><td class="num" id="LN408">408</td><td class="line"> </td></tr>
<tr><td class="num" id="LN409">409</td><td class="line">  os &lt;&lt; <span class='string_literal'>"&lt;style type=\"text/css\"&gt;\n"</span></td></tr>
<tr><td class="num" id="LN410">410</td><td class="line">      <span class='comment'>// " body { color:#000000; background-color:#ffffff }\n"</span></td></tr>
<tr><td class="num" id="LN411">411</td><td class="line">      <span class='string_literal'>" body { font-family:Helvetica, sans-serif; font-size:10pt }\n"</span></td></tr>
<tr><td class="num" id="LN412">412</td><td class="line">      <span class='string_literal'>" h1 { font-size:14pt }\n"</span></td></tr>
<tr><td class="num" id="LN413">413</td><td class="line">      <span class='string_literal'>" .type { color: green}\n"</span></td></tr>
<tr><td class="num" id="LN414">414</td><td class="line">      <span class='string_literal'>" .code { border-collapse:collapse; width:100%; }\n"</span></td></tr>
<tr><td class="num" id="LN415">415</td><td class="line">      <span class='string_literal'>" .code { font-family: \"Monospace\", monospace; font-size:10pt }\n"</span></td></tr>
<tr><td class="num" id="LN416">416</td><td class="line">      <span class='string_literal'>" .code { line-height: 1.2em }\n"</span></td></tr>
<tr><td class="num" id="LN417">417</td><td class="line">      <span class='string_literal'>" .compound { display: inline-block; }\n"</span></td></tr>
<tr><td class="num" id="LN418">418</td><td class="line">      <span class='string_literal'>" .compound.level-0:hover { margin-left: 1px; border-left-style: solid; border-left-color: yellow; }\n"</span></td></tr>
<tr><td class="num" id="LN419">419</td><td class="line">      <span class='string_literal'>" .compound.level-1:hover { margin-left: 2px; border-left-style: solid; border-left-color: green; }\n"</span></td></tr>
<tr><td class="num" id="LN420">420</td><td class="line">      <span class='string_literal'>" .compound.level-2:hover { margin-left: 3px; border-left-style: solid; border-left-color: orange; }\n"</span></td></tr>
<tr><td class="num" id="LN421">421</td><td class="line">      <span class='string_literal'>" .comment { color: magenta; font-style: oblique }\n"</span></td></tr>
<tr><td class="num" id="LN422">422</td><td class="line">      <span class='string_literal'>" .string { color: purple; }\n"</span></td></tr>
<tr><td class="num" id="LN423">423</td><td class="line">      <span class='string_literal'>" .numeric { color: purple; }\n"</span></td></tr>
<tr><td class="num" id="LN424">424</td><td class="line">      <span class='string_literal'>" .char { color: purple; }\n"</span></td></tr>
<tr><td class="num" id="LN425">425</td><td class="line">      <span class='string_literal'>" .directive { color: blue; }\n"</span></td></tr>
<tr><td class="num" id="LN426">426</td><td class="line"> </td></tr>
<tr><td class="num" id="LN427">427</td><td class="line">      <span class='comment'>// Macro expansions.</span></td></tr>
<tr><td class="num" id="LN428">428</td><td class="line">      <span class='string_literal'>" .expansion { display: none; }\n"</span></td></tr>
<tr><td class="num" id="LN429">429</td><td class="line">      <span class='string_literal'>" .macro:hover .expansion { display: block; border: 2px solid #FF0000; "</span></td></tr>
<tr><td class="num" id="LN430">430</td><td class="line">          <span class='string_literal'>"padding: 2px; background-color:#FFF0F0; font-weight: normal; "</span></td></tr>
<tr><td class="num" id="LN431">431</td><td class="line">          <span class='string_literal'>"  -webkit-border-radius:5px;  -webkit-box-shadow:1px 1px 7px #000; "</span></td></tr>
<tr><td class="num" id="LN432">432</td><td class="line">          <span class='string_literal'>"position: absolute; top: -1em; left:10em; z-index: 1 } \n"</span></td></tr>
<tr><td class="num" id="LN433">433</td><td class="line">      <span class='string_literal'>" .macro { color: darkmagenta; background-color:LemonChiffon;"</span></td></tr>
<tr><td class="num" id="LN434">434</td><td class="line">             <span class='comment'>// Macros are position: relative to provide base for expansions.</span></td></tr>
<tr><td class="num" id="LN435">435</td><td class="line">             <span class='string_literal'>" position: relative }\n"</span></td></tr>
<tr><td class="num" id="LN436">436</td><td class="line">      <span class='string_literal'>" .num { width:2.5em; padding-right:2ex; background-color:#eeeeee }\n"</span></td></tr>
<tr><td class="num" id="LN437">437</td><td class="line">      <span class='string_literal'>" .num { text-align:right; font-size:8pt }\n"</span></td></tr>
<tr><td class="num" id="LN438">438</td><td class="line">      <span class='string_literal'>" .num { color:#444444 }\n"</span></td></tr>
<tr><td class="num" id="LN439">439</td><td class="line">      <span class='string_literal'>" .line { padding-left: 1ex; border-left: 3px solid #ccc }\n"</span></td></tr>
<tr><td class="num" id="LN440">440</td><td class="line">      <span class='string_literal'>" .line { white-space: pre }\n"</span></td></tr>
<tr><td class="num" id="LN441">441</td><td class="line">      <span class='string_literal'>" .msg { -webkit-box-shadow:1px 1px 7px #000 }\n"</span></td></tr>
<tr><td class="num" id="LN442">442</td><td class="line">      <span class='string_literal'>" .msg { -webkit-border-radius:5px }\n"</span></td></tr>
<tr><td class="num" id="LN443">443</td><td class="line">      <span class='string_literal'>" .msg { font-family:Helvetica, sans-serif; font-size:8pt }\n"</span></td></tr>
<tr><td class="num" id="LN444">444</td><td class="line">      <span class='string_literal'>" .msg { float:left }\n"</span></td></tr>
<tr><td class="num" id="LN445">445</td><td class="line">      <span class='string_literal'>" .msg { padding:0.25em 1ex 0.25em 1ex }\n"</span></td></tr>
<tr><td class="num" id="LN446">446</td><td class="line">      <span class='string_literal'>" .msg { margin-top:10px; margin-bottom:10px }\n"</span></td></tr>
<tr><td class="num" id="LN447">447</td><td class="line">      <span class='string_literal'>" .msg { font-weight:bold }\n"</span></td></tr>
<tr><td class="num" id="LN448">448</td><td class="line">      <span class='string_literal'>" .msg { max-width:60em; word-wrap: break-word; white-space: pre-wrap }\n"</span></td></tr>
<tr><td class="num" id="LN449">449</td><td class="line">      <span class='string_literal'>" .msgT { padding:0x; spacing:0x }\n"</span></td></tr>
<tr><td class="num" id="LN450">450</td><td class="line">      <span class='string_literal'>" .msgEvent { background-color:#fff8b4; color:#000000 }\n"</span></td></tr>
<tr><td class="num" id="LN451">451</td><td class="line">      <span class='string_literal'>" .msgControl { background-color:#bbbbbb; color:#000000 }\n"</span></td></tr>
<tr><td class="num" id="LN452">452</td><td class="line">      <span class='string_literal'>" .mrange { background-color:#dfddf3 }\n"</span></td></tr>
<tr><td class="num" id="LN453">453</td><td class="line">      <span class='string_literal'>" .mrange { border-bottom:1px solid #6F9DBE }\n"</span></td></tr>
<tr><td class="num" id="LN454">454</td><td class="line">      <span class='string_literal'>" .PathIndex { font-weight: bold; padding:0px 5px; "</span></td></tr>
<tr><td class="num" id="LN455">455</td><td class="line">        <span class='string_literal'>"margin-right:5px; }\n"</span></td></tr>
<tr><td class="num" id="LN456">456</td><td class="line">      <span class='string_literal'>" .PathIndex { -webkit-border-radius:8px }\n"</span></td></tr>
<tr><td class="num" id="LN457">457</td><td class="line">      <span class='string_literal'>" .PathIndexEvent { background-color:#bfba87 }\n"</span></td></tr>
<tr><td class="num" id="LN458">458</td><td class="line">      <span class='string_literal'>" .PathIndexControl { background-color:#8c8c8c }\n"</span></td></tr>
<tr><td class="num" id="LN459">459</td><td class="line">      <span class='string_literal'>" .PathNav a { text-decoration:none; font-size: larger }\n"</span></td></tr>
<tr><td class="num" id="LN460">460</td><td class="line">      <span class='string_literal'>" .CodeInsertionHint { font-weight: bold; background-color: #10dd10 }\n"</span></td></tr>
<tr><td class="num" id="LN461">461</td><td class="line">      <span class='string_literal'>" .CodeRemovalHint { background-color:#de1010 }\n"</span></td></tr>
<tr><td class="num" id="LN462">462</td><td class="line">      <span class='string_literal'>" .CodeRemovalHint { border-bottom:1px solid #6F9DBE }\n"</span></td></tr>
<tr><td class="num" id="LN463">463</td><td class="line">      <span class='string_literal'>" table.simpletable {\n"</span></td></tr>
<tr><td class="num" id="LN464">464</td><td class="line">      <span class='string_literal'>"   padding: 5px;\n"</span></td></tr>
<tr><td class="num" id="LN465">465</td><td class="line">      <span class='string_literal'>"   font-size:12pt;\n"</span></td></tr>
<tr><td class="num" id="LN466">466</td><td class="line">      <span class='string_literal'>"   margin:20px;\n"</span></td></tr>
<tr><td class="num" id="LN467">467</td><td class="line">      <span class='string_literal'>"   border-collapse: collapse; border-spacing: 0px;\n"</span></td></tr>
<tr><td class="num" id="LN468">468</td><td class="line">      <span class='string_literal'>" }\n"</span></td></tr>
<tr><td class="num" id="LN469">469</td><td class="line">      <span class='string_literal'>" td.rowname {\n"</span></td></tr>
<tr><td class="num" id="LN470">470</td><td class="line">      <span class='string_literal'>"   text-align:right; font-weight:bold; color:#444444;\n"</span></td></tr>
<tr><td class="num" id="LN471">471</td><td class="line">      <span class='string_literal'>"   padding-right:2ex; }\n"</span></td></tr>
<tr><td class="num" id="LN472">472</td><td class="line">      <span class='string_literal'>"&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;pre class='code'&gt;"</span>;</td></tr>
<tr><td class="num" id="LN473">473</td><td class="line"> </td></tr>
<tr><td class="num" id="LN474">474</td><td class="line">  <span class='comment'>// Generate header</span></td></tr>
<tr><td class="num" id="LN475">475</td><td class="line">  R.InsertTextBefore(StartLoc, os.str());</td></tr>
<tr><td class="num" id="LN476">476</td><td class="line">  <span class='comment'>// Generate footer</span></td></tr>
<tr><td class="num" id="LN477">477</td><td class="line"> </td></tr>
<tr><td class="num" id="LN478">478</td><td class="line">  R.InsertTextAfter(EndLoc, <span class='string_literal'>"&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;\n"</span>);</td></tr>
<tr><td class="num" id="LN479">479</td><td class="line">}</td></tr>
<tr><td class="num" id="LN480">480</td><td class="line"> </td></tr>
<tr><td class="num" id="LN481">481</td><td class="line"><span class='keyword'>template</span>&lt; <span class='keyword'>typename</span> T &gt;</td></tr>
<tr><td class="num" id="LN482">482</td><td class="line">std::string ToHex( T i )</td></tr>
<tr><td class="num" id="LN483">483</td><td class="line">{</td></tr>
<tr><td class="num" id="LN484">484</td><td class="line">    std::stringstream stream;</td></tr>
<tr><td class="num" id="LN485">485</td><td class="line">    stream </td></tr>
<tr><td class="num" id="LN486">486</td><td class="line">           &lt;&lt; std::setfill ('0') &lt;&lt; std::setw(<span class='keyword'>sizeof</span>(T)*2) </td></tr>
<tr><td class="num" id="LN487">487</td><td class="line">           &lt;&lt; std::hex &lt;&lt; i;</td></tr>
<tr><td class="num" id="LN488">488</td><td class="line">    <span class='keyword'>return</span> stream.str();</td></tr>
<tr><td class="num" id="LN489">489</td><td class="line">}</td></tr>
<tr><td class="num" id="LN490">490</td><td class="line"> </td></tr>
<tr><td class="num" id="LN491">491</td><td class="line">std::string Join(<span class='keyword'>const</span> std::initializer_list&lt;std::string&gt;&amp; paths) {</td></tr>
<tr><td class="num" id="LN492">492</td><td class="line">  std::string result;</td></tr>
<tr><td class="num" id="LN493">493</td><td class="line">  <span class='keyword'>if</span> (!paths.size())</td></tr>
<tr><td class="num" id="LN494">494</td><td class="line">    <span class='keyword'>return</span> result;</td></tr>
<tr><td class="num" id="LN495">495</td><td class="line"> </td></tr>
<tr><td class="num" id="LN496">496</td><td class="line">  <span class='comment'>// Append all elements of the list, followed by a "/".</span></td></tr>
<tr><td class="num" id="LN497">497</td><td class="line">  <span class='keyword'>for</span> (<span class='keyword'>const</span> <span class='keyword'>auto</span>&amp; path : paths) {</td></tr>
<tr><td class="num" id="LN498">498</td><td class="line">    result.append(path);</td></tr>
<tr><td class="num" id="LN499">499</td><td class="line">    result.append(<span class='string_literal'>"/"</span>);</td></tr>
<tr><td class="num" id="LN500">500</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN501">501</td><td class="line"> </td></tr>
<tr><td class="num" id="LN502">502</td><td class="line">  <span class='comment'>// Remove last trailing "/".</span></td></tr>
<tr><td class="num" id="LN503">503</td><td class="line">  result.resize(result.size() - 1);</td></tr>
<tr><td class="num" id="LN504">504</td><td class="line">  <span class='keyword'>return</span> result;</td></tr>
<tr><td class="num" id="LN505">505</td><td class="line">}</td></tr>
<tr><td class="num" id="LN506">506</td><td class="line"> </td></tr>
<tr><td class="num" id="LN507">507</td><td class="line">std::string MakeSourcePath(<span class='keyword'>unsigned</span> hash) {</td></tr>
<tr><td class="num" id="LN508">508</td><td class="line">  std::string hex = ToHex(hash);</td></tr>
<tr><td class="num" id="LN509">509</td><td class="line">  <span class='keyword'>auto</span> end = hex.length();</td></tr>
<tr><td class="num" id="LN510">510</td><td class="line">  <span class='keyword'>return</span> Join({<span class='string_literal'>"output"</span>, <span class='string_literal'>"sources"</span>, hex.substr(end - 2), hex.substr(0, end - 2) + <span class='string_literal'>".html"</span>});</td></tr>
<tr><td class="num" id="LN511">511</td><td class="line">}</td></tr>
<tr><td class="num" id="LN512">512</td><td class="line"> </td></tr>
<tr><td class="num" id="LN513">513</td><td class="line"><span class='keyword'>bool</span> MakeDirs(<span class='keyword'>const</span> std::string&amp; path, <span class='keyword'>int</span> mode) {</td></tr>
<tr><td class="num" id="LN514">514</td><td class="line">  std::string copy(path);</td></tr>
<tr><td class="num" id="LN515">515</td><td class="line"> </td></tr>
<tr><td class="num" id="LN516">516</td><td class="line">  <span class='keyword'>for</span> (std::size_t index = 1;</td></tr>
<tr><td class="num" id="LN517">517</td><td class="line">       (index = copy.find('/', index)) != std::string::npos;) {</td></tr>
<tr><td class="num" id="LN518">518</td><td class="line">    copy[index] = '\0';</td></tr>
<tr><td class="num" id="LN519">519</td><td class="line">    <span class='keyword'>if</span> (!mkdir(copy.c_str(), mode) &amp;&amp; <span class='macro'>errno<span class='expansion'>(*__errno_location ())</span></span> != <span class='macro'>EEXIST<span class='expansion'>17</span></span>)</td></tr>
<tr><td class="num" id="LN520">520</td><td class="line">      <span class='keyword'>return</span> <span class='keyword'>false</span>;</td></tr>
<tr><td class="num" id="LN521">521</td><td class="line"> </td></tr>
<tr><td class="num" id="LN522">522</td><td class="line">    copy[index] = '/';</td></tr>
<tr><td class="num" id="LN523">523</td><td class="line">    index = index + 1;</td></tr>
<tr><td class="num" id="LN524">524</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN525">525</td><td class="line">  <span class='keyword'>return</span> <span class='keyword'>true</span>;</td></tr>
<tr><td class="num" id="LN526">526</td><td class="line">}</td></tr>
<tr><td class="num" id="LN527">527</td><td class="line"> </td></tr>
<tr><td class="num" id="LN528">528</td><td class="line"> </td></tr>
<tr><td class="num" id="LN529">529</td><td class="line"><span class='keyword'>int</span> main(<span class='keyword'>int</span> argc, <span class='keyword'>char</span> *argv[]) {</td></tr>
<tr><td class="num" id="LN530">530</td><td class="line">  <span class='keyword'>if</span> (argc &lt; 2) {</td></tr>
<tr><td class="num" id="LN531">531</td><td class="line">    llvm::errs() &lt;&lt; <span class='string_literal'>"Usage: rewritersample &lt;filename&gt;...\n"</span>;</td></tr>
<tr><td class="num" id="LN532">532</td><td class="line">    <span class='keyword'>return</span> 1;</td></tr>
<tr><td class="num" id="LN533">533</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN534">534</td><td class="line"> </td></tr>
<tr><td class="num" id="LN535">535</td><td class="line">  <span class='comment'>// CompilerInstance will hold the instance of the Clang compiler for us,</span></td></tr>
<tr><td class="num" id="LN536">536</td><td class="line">  <span class='comment'>// managing the various objects needed to run the compiler.</span></td></tr>
<tr><td class="num" id="LN537">537</td><td class="line">  CompilerInstance ci;</td></tr>
<tr><td class="num" id="LN538">538</td><td class="line">  ci.createDiagnostics();</td></tr>
<tr><td class="num" id="LN539">539</td><td class="line"> </td></tr>
<tr><td class="num" id="LN540">540</td><td class="line">  LangOptions &amp;lo = ci.getLangOpts();</td></tr>
<tr><td class="num" id="LN541">541</td><td class="line">  lo.CPlusPlus = 1;</td></tr>
<tr><td class="num" id="LN542">542</td><td class="line"> </td></tr>
<tr><td class="num" id="LN543">543</td><td class="line">  <span class='comment'>// Initialize target info with the default triple for our platform.</span></td></tr>
<tr><td class="num" id="LN544">544</td><td class="line">  <span class='keyword'>auto</span> target_options = std::make_shared&lt;TargetOptions&gt;();</td></tr>
<tr><td class="num" id="LN545">545</td><td class="line">  target_options-&gt;Triple = llvm::sys::getDefaultTargetTriple();</td></tr>
<tr><td class="num" id="LN546">546</td><td class="line">  TargetInfo *target_info =</td></tr>
<tr><td class="num" id="LN547">547</td><td class="line">      TargetInfo::CreateTargetInfo(ci.getDiagnostics(), target_options);</td></tr>
<tr><td class="num" id="LN548">548</td><td class="line">  ci.setTarget(target_info);</td></tr>
<tr><td class="num" id="LN549">549</td><td class="line"> </td></tr>
<tr><td class="num" id="LN550">550</td><td class="line">  ci.createFileManager();</td></tr>
<tr><td class="num" id="LN551">551</td><td class="line">  FileManager &amp;file_mgr = ci.getFileManager();</td></tr>
<tr><td class="num" id="LN552">552</td><td class="line">  ci.createSourceManager(file_mgr);</td></tr>
<tr><td class="num" id="LN553">553</td><td class="line">  SourceManager &amp;source_mgr = ci.getSourceManager();</td></tr>
<tr><td class="num" id="LN554">554</td><td class="line">  ci.createPreprocessor(TU_Module);</td></tr>
<tr><td class="num" id="LN555">555</td><td class="line">  ci.createASTContext();</td></tr>
<tr><td class="num" id="LN556">556</td><td class="line"> </td></tr>
<tr><td class="num" id="LN557">557</td><td class="line">  <span class='comment'>// A Rewriter helps us manage the code rewriting task.</span></td></tr>
<tr><td class="num" id="LN558">558</td><td class="line">  Rewriter rewriter;</td></tr>
<tr><td class="num" id="LN559">559</td><td class="line">  rewriter.setSourceMgr(source_mgr, ci.getLangOpts());</td></tr>
<tr><td class="num" id="LN560">560</td><td class="line"> </td></tr>
<tr><td class="num" id="LN561">561</td><td class="line">  <span class='comment'>// Create an AST consumer instance which is going to get called by</span></td></tr>
<tr><td class="num" id="LN562">562</td><td class="line">  <span class='comment'>// ParseAST.</span></td></tr>
<tr><td class="num" id="LN563">563</td><td class="line">  MyASTConsumer consumer(rewriter, source_mgr);</td></tr>
<tr><td class="num" id="LN564">564</td><td class="line"> </td></tr>
<tr><td class="num" id="LN565">565</td><td class="line">  <span class='keyword'>for</span> (<span class='keyword'>int</span> i = 1; i &lt; argc; ++i) {</td></tr>
<tr><td class="num" id="LN566">566</td><td class="line">    <span class='comment'>// Set the main file handled by the source manager to the input file.</span></td></tr>
<tr><td class="num" id="LN567">567</td><td class="line">    <span class='keyword'>const</span> FileEntry *input = file_mgr.getFile(argv[i]);</td></tr>
<tr><td class="num" id="LN568">568</td><td class="line">    <span class='keyword'>auto</span> fid = source_mgr.createFileID(input, SourceLocation(), SrcMgr::C_User);</td></tr>
<tr><td class="num" id="LN569">569</td><td class="line">    source_mgr.setMainFileID(fid);</td></tr>
<tr><td class="num" id="LN570">570</td><td class="line">    ci.getDiagnosticClient().BeginSourceFile(ci.getLangOpts(), &amp;ci.getPreprocessor());</td></tr>
<tr><td class="num" id="LN571">571</td><td class="line"> </td></tr>
<tr><td class="num" id="LN572">572</td><td class="line"> </td></tr>
<tr><td class="num" id="LN573">573</td><td class="line">    <span class='comment'>// Parse the file to AST, registering our consumer as the AST consumer.</span></td></tr>
<tr><td class="num" id="LN574">574</td><td class="line">    ParseAST(ci.getPreprocessor(), &amp;consumer, ci.getASTContext());</td></tr>
<tr><td class="num" id="LN575">575</td><td class="line"> </td></tr>
<tr><td class="num" id="LN576">576</td><td class="line">    WrapIt(rewriter, fid, <span class='string_literal'>"test"</span>);</td></tr>
<tr><td class="num" id="LN577">577</td><td class="line">    RawHighlight(rewriter, fid, ci.getPreprocessor());</td></tr>
<tr><td class="num" id="LN578">578</td><td class="line"> </td></tr>
<tr><td class="num" id="LN579">579</td><td class="line">    html::EscapeText(rewriter, fid, <span class='keyword'>false</span>, <span class='keyword'>true</span>);</td></tr>
<tr><td class="num" id="LN580">580</td><td class="line"> </td></tr>
<tr><td class="num" id="LN581">581</td><td class="line">    <span class='comment'>// Check comments. THIS ONLY CAPTURES doxygen comments.</span></td></tr>
<tr><td class="num" id="LN582">582</td><td class="line">    <span class='keyword'>auto</span>&amp; ast_context = ci.getASTContext();</td></tr>
<tr><td class="num" id="LN583">583</td><td class="line"><span class='comment'>//    ast_context.getExternalSource()-&gt;ReadComments();</span></td></tr>
<tr><td class="num" id="LN584">584</td><td class="line">    <span class='keyword'>const</span> <span class='keyword'>auto</span>&amp; comments = ast_context.getRawCommentList().getComments();</td></tr>
<tr><td class="num" id="LN585">585</td><td class="line">    std::cerr &lt;&lt; <span class='string_literal'>"DUMPING COMMENTS"</span> &lt;&lt; std::endl;</td></tr>
<tr><td class="num" id="LN586">586</td><td class="line">    <span class='keyword'>for</span> (<span class='keyword'>auto</span>&amp; comment : comments) </td></tr>
<tr><td class="num" id="LN587">587</td><td class="line">      std::cerr &lt;&lt; <span class='string_literal'>"COMMENT "</span> &lt;&lt; comment-&gt;getRawText(source_mgr).str() &lt;&lt; std::endl;</td></tr>
<tr><td class="num" id="LN588">588</td><td class="line">    std::cerr &lt;&lt; <span class='string_literal'>"DONE COMMENTS"</span> &lt;&lt; std::endl;</td></tr>
<tr><td class="num" id="LN589">589</td><td class="line"> </td></tr>
<tr><td class="num" id="LN590">590</td><td class="line">    <span class='keyword'>auto</span> path = MakeSourcePath(fid.getHashValue());</td></tr>
<tr><td class="num" id="LN591">591</td><td class="line">    std::cerr &lt;&lt; <span class='string_literal'>"PATH "</span> &lt;&lt; path &lt;&lt; std::endl;</td></tr>
<tr><td class="num" id="LN592">592</td><td class="line">    <span class='keyword'>if</span> (!MakeDirs(path, 0777)) {</td></tr>
<tr><td class="num" id="LN593">593</td><td class="line">      std::cerr &lt;&lt; <span class='string_literal'>"FAILED TO MAKE DIRS"</span> &lt;&lt; std::endl;</td></tr>
<tr><td class="num" id="LN594">594</td><td class="line">      <span class='keyword'>return</span> 5;</td></tr>
<tr><td class="num" id="LN595">595</td><td class="line">    }</td></tr>
<tr><td class="num" id="LN596">596</td><td class="line"> </td></tr>
<tr><td class="num" id="LN597">597</td><td class="line">    <span class='comment'>// At this point the rewriter's buffer should be full with the rewritten</span></td></tr>
<tr><td class="num" id="LN598">598</td><td class="line">    <span class='comment'>// file contents.</span></td></tr>
<tr><td class="num" id="LN599">599</td><td class="line">    <span class='keyword'>const</span> RewriteBuffer *RewriteBuf = rewriter.getRewriteBufferFor(fid);</td></tr>
<tr><td class="num" id="LN600">600</td><td class="line">    llvm::outs() &lt;&lt; std::string(RewriteBuf-&gt;begin(), RewriteBuf-&gt;end());</td></tr>
<tr><td class="num" id="LN601">601</td><td class="line"> </td></tr>
<tr><td class="num" id="LN602">602</td><td class="line">    std::ofstream myfile;</td></tr>
<tr><td class="num" id="LN603">603</td><td class="line">    myfile.open(path);</td></tr>
<tr><td class="num" id="LN604">604</td><td class="line">    myfile &lt;&lt; std::string(RewriteBuf-&gt;begin(), RewriteBuf-&gt;end());</td></tr>
<tr><td class="num" id="LN605">605</td><td class="line">  }</td></tr>
<tr><td class="num" id="LN606">606</td><td class="line"> </td></tr>
<tr><td class="num" id="LN607">607</td><td class="line">  <span class='keyword'>return</span> 0;</td></tr>
<tr><td class="num" id="LN608">608</td><td class="line">}</td></tr>
</table></body></html>
